var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AddMessage.html",[0,0.079,1,0.882]],["body/classes/AddMessage.html",[0,0.152,1,1.239,2,0.94,3,0.32,4,0.284,5,0.284,6,0.867,7,1.625,8,1.863,9,0.216,10,0.757,11,1.461,12,1.316,13,2.461,14,0.732,15,1.055,16,2.262,17,0.885,18,3.881,19,0.681,20,0.032,21,0.576,22,0.627,23,2.705,24,0.576,25,0.576,26,1.586,27,0.6,28,0.576,29,0.438,30,1.055,31,1.018,32,0.94,33,1.018,34,1.018,35,1.343,36,0.713,37,1.105,38,0.739,39,1.461,40,1.461,41,1.461,42,1.461,43,1.461,44,1.461,45,1.461,46,1.461,47,1.461,48,1.105,49,1.105,50,1.375,51,1.105,52,1.854,53,1.468,54,0.94,55,1.105,56,0.977,57,1.105,58,2.233,59,1.434,60,1.105,61,1.149,62,0.94,63,0.681,64,1.149,65,0.94,66,1.149,67,0.94,68,0.899,69,1.105,70,1.06,71,1.149,72,0.94,73,0.013,74,0.018,75,0.013]],["title/classes/AddMessageSuccess.html",[0,0.079,64,0.956]],["body/classes/AddMessageSuccess.html",[0,0.152,1,1.06,2,0.94,3,0.32,4,0.284,5,0.284,6,0.867,7,1.625,8,1.863,9,0.216,10,0.757,11,1.461,12,1.316,13,2.461,14,0.732,15,1.055,16,2.262,17,0.885,19,0.681,20,0.032,21,0.576,22,0.627,24,0.576,25,0.576,26,1.105,27,0.6,28,0.576,29,0.438,30,1.055,31,1.018,32,0.94,33,1.018,34,1.018,35,1.343,36,0.713,37,1.105,38,0.739,39,1.461,40,1.461,41,1.461,42,1.461,43,1.461,44,1.461,45,1.461,46,1.461,47,1.461,48,1.105,49,1.105,50,1.375,51,1.105,52,1.854,53,1.468,54,0.94,55,1.105,56,0.977,57,1.105,58,2.233,59,1.434,60,1.105,61,1.149,62,0.94,63,0.681,64,1.343,65,1.348,66,1.149,67,0.94,68,0.899,69,1.105,70,1.06,71,1.149,72,0.94,73,0.013,74,0.018,75,0.013,76,3.881,77,2.705]],["title/components/AppComponent.html",[78,1.122,79,1.32]],["body/components/AppComponent.html",[0,0.06,3,0.29,4,0.258,5,0.258,7,0.987,9,0.196,10,0.705,14,0.508,15,0.522,17,1.135,19,0.91,20,0.032,21,1.008,22,0.838,25,0.769,27,0.742,28,0.522,29,0.398,36,0.29,50,0.91,68,0.838,70,0.67,73,0.012,74,0.017,75,0.012,78,1.491,79,1.935,80,2.11,81,1.59,82,1.59,83,1.59,84,1.59,85,2.052,86,2.782,87,1.59,88,3.423,89,2.801,90,1.917,91,2.343,92,4.293,93,2.343,94,3.616,95,2.294,96,4.293,97,1.606,98,5.283,99,3.069,100,4.737,101,2.343,102,3.069,103,4.293,104,3.423,105,3.128,106,1.432,107,2.559,108,3.54,109,3.616,110,2.454,111,2.104,112,2.511,113,2.454,114,2.454,115,2.677,116,2.454,117,2.454,118,2.454,119,2.454,120,2.454,121,2.454,122,2.454,123,2.454,124,1.788,125,2.454,126,0.852,127,1.301,128,1.09,129,1.432,130,2.765,131,1.907,132,1.432,133,1.59,134,2.052,135,1.432,136,1.188,137,1.788,138,4.293,139,1.188,140,1.432,141,1.783,142,2.454,143,2.454,144,2.454,145,2.454,146,3.616,147,1.788,148,1.788,149,1.59,150,1.788,151,2.454,152,2.052,153,1.788,154,1.188,155,1.003,156,2.052,157,3.069,158,3.024,159,2.276,160,2.454,161,3.961,162,3.024,163,2.454,164,2.634,165,1.788,166,2.052,167,3.451,168,2.634,169,2.634,170,2.634,171,2.052,172,2.454,173,2.454,174,3.616,175,2.052,176,2.052,177,2.454,178,3.024,179,3.616,180,2.052,181,3.616,182,1.788,183,2.454,184,2.454,185,4.293,186,2.454,187,2.454,188,1.788,189,2.052,190,2.454,191,2.454,192,2.454,193,2.454,194,2.454,195,3.616,196,1.788,197,2.454,198,1.301,199,2.343,200,2.11,201,1.59,202,2.765,203,1.59,204,1.59,205,1.003,206,1.59,207,1.003,208,1.59,209,1.003,210,1.59,211,1.59]],["title/modules/AppModule.html",[212,2.094,213,2.094]],["body/modules/AppModule.html",[0,0.073,3,0.352,4,0.312,5,0.312,20,0.032,27,0.855,28,0.883,36,0.352,73,0.014,74,0.02,75,0.014,79,2.529,89,1.575,126,1.032,127,1.575,136,1.439,182,2.165,198,1.575,205,2.302,207,2.302,209,2.302,212,1.925,213,4.131,214,1.734,215,1.925,216,3.996,217,3.996,218,3.469,219,2.165,220,2.485,221,2.485,222,2.485,223,2.485,224,3.289,225,3.963,226,3.469,227,2.165,228,2.165,229,2.971,230,3.469,231,4.148,232,2.971,233,3.469,234,4.148,235,4.148,236,1.734,237,4.148,238,3.469,239,1.925,240,4.148,241,2.971,242,2.485,243,2.971,244,1.925,245,2.971,246,2.971,247,2.485,248,2.971,249,3.096,250,2.485,251,2.971,252,2.165,253,1.734,254,2.971,255,2.971,256,2.485,257,2.485,258,2.485,259,2.485,260,1.925,261,2.971,262,3.022,263,2.165,264,2.165,265,4.148,266,2.485,267,2.165,268,2.165,269,2.971,270,2.971,271,2.971,272,2.485,273,2.971,274,2.971,275,2.971,276,2.971,277,2.971,278,4.148,279,2.971,280,2.971,281,2.971,282,2.971,283,2.971,284,2.971,285,2.971,286,2.971,287,2.971,288,2.971,289,2.971]],["title/classes/AppPage.html",[0,0.079,290,2.354]],["body/classes/AppPage.html",[0,0.111,2,1.573,3,0.536,4,0.476,5,0.476,9,0.362,17,1.064,20,0.031,27,0.599,36,0.536,73,0.022,74,0.026,75,0.022,90,2.402,97,2.425,111,2.425,141,2.055,200,2.644,239,2.935,290,3.977,291,3.788,292,6.082,293,6.082,294,4.53,295,4.53,296,3.788,297,4.53,298,5.458,299,4.53,300,4.53]],["title/modules/AppRoutingModule.html",[212,2.094,224,1.886]],["body/modules/AppRoutingModule.html",[0,0.097,3,0.468,4,0.415,5,0.415,20,0.032,27,0.822,36,0.594,73,0.019,74,0.024,75,0.019,78,1.915,79,1.616,126,1.374,136,1.916,157,3.253,159,2.097,205,2.051,207,2.051,209,2.051,214,2.309,219,2.882,224,2.93,230,3.309,233,4.198,242,4.198,256,3.309,257,3.309,258,3.309,259,3.309,301,3.956,302,3.956,303,3.253,304,3.758,305,3.956,306,1.916,307,3.956,308,5.8,309,2.882,310,4.612,311,3.956,312,3.956,313,3.956,314,3.956]],["title/components/ChatComponent.html",[78,1.122,205,1.32]],["body/components/ChatComponent.html",[0,0.07,1,0.608,3,0.157,4,0.14,5,0.14,7,0.608,8,0.851,9,0.178,10,0.435,11,1.767,12,0.916,14,0.636,15,0.474,17,1.134,19,1.084,20,0.032,21,1.06,22,0.997,24,1.032,25,0.999,27,0.688,28,0.283,29,0.216,35,0.996,36,0.157,38,0.363,50,0.335,56,0.943,63,0.561,66,0.996,73,0.006,74,0.011,75,0.006,78,1.169,79,0.543,80,1.301,81,0.862,82,2.18,83,0.862,84,0.862,86,1.863,87,0.862,88,2.627,89,2.149,91,1.444,93,1.444,95,2.775,97,0.99,99,2.18,101,1.444,104,0.862,105,2.095,106,0.776,107,1.963,111,2.085,112,2.283,115,2.57,124,0.969,126,0.462,127,0.705,128,0.591,129,0.776,130,2.513,131,0.591,132,0.776,133,0.862,135,0.776,139,2.469,140,1.678,141,1.767,147,0.969,148,0.969,149,1.444,150,1.623,152,1.112,153,0.969,154,1.815,155,0.543,157,2.428,158,1.863,159,0.705,161,1.863,162,1.863,164,0.969,165,0.969,167,2.451,168,2.095,169,2.729,170,2.095,175,1.112,176,1.863,178,1.863,180,2.814,182,0.969,188,2.451,189,1.112,196,0.969,198,0.705,199,1.444,200,1.964,201,0.862,202,1.964,203,0.862,204,0.862,205,1.531,206,0.862,207,0.543,208,0.862,209,0.543,210,0.862,211,0.862,225,1.623,236,0.776,244,0.862,249,0.862,263,0.969,264,0.969,267,0.969,268,0.969,306,1.393,315,1.112,316,2.095,317,2.876,318,2.228,319,2.876,320,2.876,321,2.876,322,2.876,323,2.876,324,2.876,325,2.876,326,2.953,327,2.228,328,2.228,329,2.228,330,2.451,331,2.228,332,1.863,333,3.365,334,2.876,335,2.876,336,2.876,337,3.365,338,2.228,339,2.228,340,1.33,341,3.365,342,2.228,343,2.74,344,1.33,345,2.228,346,2.228,347,1.33,348,1.301,349,2.228,350,1.33,351,1.33,352,1.33,353,2.228,354,1.33,355,2.228,356,3.133,357,1.33,358,1.33,359,1.33,360,1.33,361,1.33,362,1.33,363,2.729,364,1.623,365,1.33,366,1.33,367,3.365,368,2.228,369,1.33,370,1.33,371,1.33,372,1.33,373,1.33,374,1.33,375,1.33,376,1.33,377,1.33,378,1.33,379,1.33,380,1.33,381,0.969,382,1.112,383,1.33,384,1.112,385,2.095,386,1.112,387,1.33,388,1.33,389,1.33,390,3.747,391,1.33,392,1.33,393,1.112,394,1.33,395,1.33,396,2.228,397,2.489,398,3.39,399,2.814,400,1.33,401,1.444,402,1.33,403,1.863,404,2.228,405,2.228,406,2.228,407,1.33,408,0.969,409,1.33,410,1.33,411,2.228,412,1.112,413,2.228,414,1.33,415,1.33,416,1.33,417,1.33,418,1.33,419,2.876,420,2.228,421,1.33,422,2.228,423,2.228,424,1.33,425,1.33,426,1.33,427,3.747,428,1.33,429,1.33,430,1.301,431,1.33,432,1.33,433,1.33,434,1.112,435,2.228,436,1.33,437,1.112,438,1.33,439,1.33,440,1.33,441,1.33,442,1.33,443,1.33,444,1.33,445,1.33,446,2.228,447,1.33,448,1.33,449,1.33,450,2.228,451,2.228,452,0.969,453,0.969,454,2.228,455,2.228,456,2.876,457,1.33,458,2.228,459,3.133,460,1.33,461,1.33,462,1.33,463,1.33,464,1.33,465,1.33,466,1.33,467,1.33,468,1.33,469,1.33,470,3.365,471,2.228,472,1.863,473,3.365,474,1.33,475,2.228,476,1.33,477,2.228,478,1.33,479,1.33,480,1.33,481,1.33,482,1.33,483,1.33,484,1.33,485,1.33,486,1.112,487,1.33,488,2.228,489,1.863,490,1.33,491,1.33,492,1.112,493,1.863,494,1.33,495,2.228,496,2.228,497,1.33,498,1.33,499,1.112,500,1.33,501,1.33,502,1.33,503,1.33,504,1.33]],["title/injectables/ChatEffects.html",[260,2.094,505,1.435]],["body/injectables/ChatEffects.html",[0,0.054,1,1.228,3,0.262,4,0.232,5,0.232,9,0.177,10,0.652,12,0.859,14,0.262,15,0.712,17,0.991,19,0.556,20,0.032,21,0.47,22,0.512,24,1.028,25,1.028,27,0.773,28,0.47,29,0.358,30,1.123,31,0.832,32,0.768,35,1.562,36,0.262,38,0.604,50,1.132,53,0.654,59,0.604,61,0.654,64,0.654,68,0.512,70,1.102,71,0.654,73,0.01,74,0.016,75,0.01,90,1.172,95,2.178,107,1.071,108,1.433,126,0.768,128,2.258,131,0.982,133,1.433,134,1.849,135,1.29,136,1.071,139,1.62,141,2.135,154,2.747,155,1.838,159,1.773,202,1.952,244,1.433,249,1.433,252,3.277,260,2.167,306,2.461,382,1.849,385,1.611,412,2.797,505,1.486,506,1.433,507,1.849,508,4.034,509,4.034,510,2.211,511,2.915,512,4.498,513,3.42,514,2.211,515,3.345,516,5.435,517,4.498,518,3.345,519,4.831,520,2.211,521,2.211,522,3.345,523,3.345,524,3.345,525,3.345,526,2.797,527,2.437,528,3.345,529,3.345,530,3.345,531,3.345,532,3.345,533,5.082,534,3.345,535,3.345,536,2.797,537,3.345,538,3.345,539,3.345,540,3.345,541,4.498,542,3.345,543,3.345,544,5.672,545,2.211,546,3.345,547,3.345,548,3.345,549,3.345,550,3.345,551,3.345,552,3.345,553,3.345,554,2.211,555,3.345,556,3.345,557,2.211,558,3.345,559,3.374,560,3.345,561,3.345,562,3.345,563,2.211,564,1.611,565,1.071,566,2.211,567,2.211,568,1.433,569,2.211]],["title/injectables/ChatService.html",[505,1.435,513,2.094]],["body/injectables/ChatService.html",[0,0.086,3,0.414,4,0.367,5,0.367,9,0.279,10,0.904,11,2.335,12,1.284,14,0.414,15,1.106,17,1.177,19,0.88,20,0.032,21,0.744,22,0.81,24,0.744,25,0.744,27,0.762,32,1.215,36,0.414,56,0.88,73,0.017,74,0.022,75,0.017,90,1.854,95,2.865,97,2.059,101,3.003,111,2.309,112,1.854,126,1.215,130,3.36,131,1.554,141,1.957,253,2.041,332,3.876,505,2.059,506,2.266,513,3.003,568,2.266,570,2.925,571,5.197,572,5.197,573,5.534,574,5.534,575,5.197,576,4.634,577,3.498,578,3.498,579,4.634,580,3.498,581,4.634,582,3.498,583,3.498,584,3.498,585,3.498,586,2.925,587,2.925,588,2.925,589,3.498,590,4.634,591,3.498,592,3.498,593,4.634,594,3.498,595,3.498,596,3.498,597,3.498]],["title/interfaces/ChatState.html",[29,0.524,598,1.435]],["body/interfaces/ChatState.html",[3,0.384,4,0.341,5,0.341,8,0.961,9,0.259,10,0.86,12,1.065,14,0.685,20,0.032,24,0.691,27,0.429,29,0.87,30,1.143,36,0.635,38,0.887,54,1.128,56,1.517,62,1.128,63,1.457,65,1.128,67,1.128,70,1.617,72,1.128,73,0.015,74,0.021,75,0.015,115,3.14,139,2.804,141,2.269,155,1.801,306,2.135,343,3.134,348,1.895,397,1.721,403,2.857,527,2.365,564,2.365,565,2.135,598,1.958,599,2.104,600,1.895,601,4.315,602,3.38,603,4.186,604,4.408,605,2.857,606,2.857,607,2.857,608,2.715,609,2.365,610,2.365,611,2.365,612,2.715,613,2.715,614,4.695,615,2.715,616,2.715,617,4.491,618,2.715,619,3.212,620,2.715,621,2.715,622,3.687,623,3.687,624,2.715,625,2.715]],["title/guards/IsExistName.html",[304,2.094,626,2.354]],["body/guards/IsExistName.html",[0,0.084,3,0.405,4,0.359,5,0.359,7,0.934,9,0.273,14,0.54,15,0.728,17,0.891,19,1.149,20,0.032,21,0.972,22,1.058,27,0.807,28,0.728,29,0.555,36,0.405,59,1.247,63,1.294,73,0.016,74,0.022,75,0.016,90,1.814,95,1.657,97,2.028,102,2.959,106,1.997,107,2.847,108,3.889,111,1.52,126,1.188,127,1.814,129,1.997,130,3,131,1.52,132,1.997,135,1.997,136,1.657,137,2.492,140,1.997,141,2.152,149,2.217,156,2.861,304,2.959,309,3.327,310,4.78,385,3.327,386,2.861,505,2.028,559,2.861,568,2.217,602,1.997,627,3.421,628,2.861,629,3.421,630,3.421,631,5.485,632,5.485,633,3.421,634,4.567,635,3.421,636,3.421,637,3.421,638,3.421,639,3.421,640,3.421,641,3.421,642,4.567,643,3.421,644,4.567,645,4.567]],["title/classes/Load.html",[0,0.079,59,0.882]],["body/classes/Load.html",[0,0.154,1,1.071,2,0.953,3,0.325,4,0.288,5,0.288,6,0.88,7,1.63,8,1.883,9,0.219,10,0.765,12,1.23,13,2.468,14,0.722,15,1.124,17,0.765,20,0.032,24,0.584,25,0.584,26,1.121,27,0.605,28,0.584,29,0.445,30,1.062,31,1.033,32,0.953,33,1.033,34,1.033,35,1.354,36,0.715,37,1.121,38,0.749,39,1.476,40,1.476,41,1.476,42,1.476,43,1.476,44,1.476,45,1.476,46,1.476,47,1.476,48,1.121,49,1.121,50,1.382,51,1.121,52,2.039,53,1.477,54,0.953,55,1.121,56,0.987,57,1.121,58,2.243,59,1.578,60,1.602,61,1.16,62,0.953,63,0.691,64,1.16,65,0.953,66,1.16,67,0.953,68,0.908,69,1.121,70,1.071,71,1.16,72,0.953,73,0.013,74,0.019,75,0.013,430,1.601,646,2.295,647,3.921]],["title/classes/LoadSuccess.html",[0,0.079,61,0.956]],["body/classes/LoadSuccess.html",[0,0.152,1,1.06,2,0.94,3,0.32,4,0.284,5,0.284,6,0.867,7,1.625,8,1.863,9,0.216,10,0.757,11,1.461,12,1.225,13,2.461,14,0.732,15,1.055,17,0.885,19,0.681,20,0.032,21,0.576,22,0.627,24,0.576,25,0.576,26,1.105,27,0.6,28,0.576,29,0.438,30,1.198,31,1.018,32,0.94,33,1.018,34,1.018,35,1.343,36,0.713,37,1.105,38,0.739,39,1.461,40,1.461,41,1.461,42,1.461,43,1.461,44,1.461,45,1.461,46,1.461,47,1.461,48,1.105,49,1.105,50,1.375,51,1.105,52,1.854,53,1.468,54,0.94,55,1.105,56,0.977,57,1.105,58,2.233,59,1.434,60,1.105,61,1.343,62,1.348,63,1.248,64,1.149,65,0.94,66,1.149,67,0.94,68,0.899,69,1.105,70,1.06,71,1.149,72,0.94,73,0.013,74,0.018,75,0.013,648,2.705,649,3.881,650,2.705]],["title/components/LoginComponent.html",[78,1.122,207,1.32]],["body/components/LoginComponent.html",[0,0.114,3,0.333,4,0.296,5,0.296,7,1.091,9,0.225,10,0.779,11,1.747,14,0.549,15,0.85,17,1.08,19,0.709,20,0.032,21,1.135,22,0.652,24,0.599,25,0.85,27,0.77,28,0.599,29,0.456,30,0.85,36,0.333,68,0.652,73,0.013,74,0.019,75,0.013,78,1.754,79,1.15,80,2.331,81,1.825,82,1.825,83,1.825,84,1.825,86,3.007,87,1.825,88,3.589,89,2.936,91,2.588,93,2.588,95,2.582,97,1.774,99,3.272,106,1.643,107,2.682,108,3.691,111,2.061,112,2.677,126,0.978,127,1.493,128,1.251,129,1.643,131,2.061,132,1.643,136,1.364,140,1.643,154,1.364,155,2.063,157,3.272,159,1.493,198,1.493,199,2.588,200,2.331,201,1.825,202,2.948,203,1.825,204,1.825,205,1.15,206,1.825,207,2.178,208,1.825,209,1.15,210,1.825,211,1.825,236,1.643,306,1.934,309,3.381,316,3.381,326,4.035,330,3.679,363,3.679,364,2.051,381,2.051,408,2.051,452,2.051,453,2.051,492,3.34,565,1.364,651,2.355,652,4.641,653,3.994,654,5.05,655,3.994,656,2.816,657,2.816,658,2.816,659,2.816,660,2.355,661,2.816,662,2.816,663,2.816,664,3.994,665,2.816,666,2.816,667,2.355,668,2.816,669,2.816,670,3.34,671,3.994]],["title/interfaces/Message.html",[12,0.688,598,1.435]],["body/interfaces/Message.html",[3,0.529,4,0.469,5,0.469,9,0.357,10,1.056,12,1.152,14,0.717,20,0.03,21,1.289,22,1.403,36,0.529,73,0.021,74,0.026,75,0.021,115,3.089,343,3.782,348,3.534,430,3.534,598,1.986,599,2.897,609,4.411,672,3.739]],["title/injectables/SessionstorageService.html",[505,1.435,511,2.094]],["body/injectables/SessionstorageService.html",[0,0.104,3,0.503,4,0.446,5,0.446,9,0.339,14,0.503,15,1.212,17,1.111,19,1.07,20,0.031,21,0.904,22,0.985,27,0.754,30,1.325,36,0.503,73,0.02,74,0.025,75,0.02,90,2.253,97,2.332,111,2.332,112,2.253,126,1.476,128,2.643,141,1.6,253,2.481,505,2.332,506,2.754,511,3.402,526,3.554,568,2.754,588,3.554,673,3.554,674,5.25,675,4.25,676,4.25,677,5.25,678,4.25,679,4.25,680,4.25,681,4.25,682,4.25,683,4.25]],["title/components/SettingsComponent.html",[78,1.122,209,1.32]],["body/components/SettingsComponent.html",[0,0.098,3,0.256,4,0.227,5,0.227,7,0.899,9,0.173,10,0.642,11,1.5,14,0.527,15,0.461,17,1.079,19,0.829,20,0.032,21,0.947,22,0.763,24,0.461,25,0.947,27,0.714,28,0.461,29,0.351,30,0.947,36,0.256,68,0.763,73,0.01,74,0.016,75,0.01,78,1.546,79,0.885,80,1.922,81,1.404,82,1.404,83,1.404,84,1.404,86,2.582,87,1.404,88,3.268,89,2.673,91,2.134,93,2.134,95,2.442,97,1.463,99,2.885,101,2.134,105,2.903,106,1.264,107,2.442,111,1.977,112,2.36,115,1.746,124,1.578,126,0.752,127,1.148,128,0.962,129,1.264,130,1.922,131,0.962,132,1.264,133,1.404,135,1.264,137,1.578,139,1.049,140,1.264,141,1.24,147,1.578,148,1.578,149,1.404,150,1.578,153,1.578,154,2.442,155,2.207,159,2.863,164,1.578,165,1.578,167,3.674,168,1.578,169,2.903,170,3.243,171,2.754,188,1.578,196,2.399,198,1.148,199,2.134,200,1.922,201,1.404,202,2.598,203,1.404,204,1.404,205,0.885,206,1.404,207,0.885,208,1.404,209,1.956,210,1.404,211,1.404,227,3.674,236,1.264,272,1.812,306,1.93,316,2.903,326,3.674,330,3.243,343,1.922,363,2.399,364,1.578,381,2.399,397,1.148,398,3.723,399,1.812,401,1.404,408,1.578,434,1.812,437,1.812,452,1.578,453,1.578,459,2.754,472,1.812,486,2.754,493,1.812,499,1.812,565,1.049,598,1.463,605,2.134,606,2.134,607,2.134,660,2.754,667,1.812,670,3.723,684,1.812,685,3.985,686,3.293,687,3.293,688,3.293,689,3.293,690,3.985,691,2.166,692,2.166,693,2.166,694,2.166,695,4.452,696,2.166,697,2.166,698,2.166,699,2.166,700,2.166,701,2.166,702,2.166,703,3.985,704,2.166,705,2.166,706,2.166,707,3.293,708,2.166,709,3.293,710,2.166,711,2.166,712,2.166,713,2.166,714,2.166,715,3.293,716,3.985,717,3.293,718,3.293,719,4.452,720,3.293,721,4.452,722,4.452,723,3.293,724,3.293,725,3.985,726,2.166,727,2.166,728,2.166,729,2.166,730,2.166,731,2.166,732,2.166,733,2.754,734,2.166,735,2.166]],["title/classes/Start.html",[0,0.079,50,0.813]],["body/classes/Start.html",[0,0.153,1,1.072,2,0.955,3,0.325,4,0.289,5,0.289,6,0.881,7,1.631,8,1.876,9,0.219,10,0.765,12,1.231,13,2.469,14,0.722,15,1.124,17,0.765,20,0.032,24,0.585,25,0.585,26,1.123,27,0.606,28,0.585,29,0.446,30,1.063,31,1.035,32,0.955,33,1.035,34,1.035,35,1.478,36,0.715,37,1.123,38,0.75,39,1.478,40,1.478,41,1.478,42,1.478,43,1.478,44,1.478,45,1.478,46,1.478,47,1.478,48,1.604,49,1.604,50,1.456,51,1.604,52,2.041,53,1.478,54,0.955,55,1.123,56,0.988,57,1.123,58,2.245,59,1.443,60,1.123,61,1.162,62,0.955,63,0.692,64,1.162,65,0.955,66,1.162,67,0.955,68,0.909,69,1.123,70,1.072,71,1.162,72,0.955,73,0.013,74,0.019,75,0.013,430,1.604,736,3.925]],["title/classes/StartSuccess.html",[0,0.079,53,0.956]],["body/classes/StartSuccess.html",[0,0.153,1,1.05,2,0.928,3,0.316,4,0.28,5,0.28,6,0.856,7,1.62,8,1.877,9,0.213,10,0.75,11,1.448,12,1.279,13,2.455,14,0.731,15,1.049,17,0.879,19,0.672,20,0.032,21,0.568,22,0.619,24,0.568,25,0.568,26,1.091,27,0.596,28,0.568,29,0.433,30,1.049,31,1.006,32,0.928,33,1.006,34,1.006,35,1.334,36,0.711,37,1.091,38,0.729,39,1.448,40,1.448,41,1.448,42,1.448,43,1.448,44,1.448,45,1.448,46,1.448,47,1.448,48,1.091,49,1.091,50,1.412,51,1.091,52,2.014,53,1.611,54,1.336,55,1.091,56,1.315,57,1.091,58,2.223,59,1.427,60,1.091,61,1.138,62,0.928,63,0.672,64,1.138,65,0.928,66,1.138,67,0.928,68,0.891,69,1.091,70,1.05,71,1.138,72,0.928,73,0.013,74,0.018,75,0.013,430,1.559,646,2.234,737,2.671,738,3.846,739,2.671]],["title/classes/UpdateConfig.html",[0,0.079,68,0.749]],["body/classes/UpdateConfig.html",[0,0.152,1,1.06,2,0.94,3,0.32,4,0.284,5,0.284,6,0.867,7,1.625,8,1.863,9,0.216,10,0.757,11,1.461,12,1.225,13,2.461,14,0.732,15,1.055,17,0.885,19,0.681,20,0.032,21,0.576,22,0.627,24,0.576,25,0.576,26,1.105,27,0.6,28,0.576,29,0.438,30,1.198,31,1.018,32,0.94,33,1.018,34,1.018,35,1.343,36,0.713,37,1.105,38,0.739,39,1.461,40,1.461,41,1.461,42,1.461,43,1.461,44,1.461,45,1.461,46,1.461,47,1.461,48,1.105,49,1.105,50,1.375,51,1.105,52,1.854,53,1.468,54,0.94,55,1.105,56,0.977,57,1.105,58,2.233,59,1.434,60,1.105,61,1.149,62,0.94,63,0.681,64,1.149,65,0.94,66,1.149,67,0.94,68,1.051,69,1.586,70,1.434,71,1.149,72,0.94,73,0.013,74,0.018,75,0.013,740,2.262,741,3.881,742,2.705]],["title/classes/UpdateConfigSuccess.html",[0,0.079,71,0.956]],["body/classes/UpdateConfigSuccess.html",[0,0.152,1,1.06,2,0.94,3,0.32,4,0.284,5,0.284,6,0.867,7,1.625,8,1.863,9,0.216,10,0.757,11,1.461,12,1.225,13,2.461,14,0.732,15,1.055,17,0.885,19,0.681,20,0.032,21,0.576,22,0.627,24,0.576,25,0.576,26,1.105,27,0.6,28,0.576,29,0.438,30,1.198,31,1.018,32,0.94,33,1.018,34,1.018,35,1.343,36,0.713,37,1.105,38,0.739,39,1.461,40,1.461,41,1.461,42,1.461,43,1.461,44,1.461,45,1.461,46,1.461,47,1.461,48,1.105,49,1.105,50,1.375,51,1.105,52,1.854,53,1.468,54,0.94,55,1.105,56,0.977,57,1.105,58,2.233,59,1.434,60,1.105,61,1.149,62,0.94,63,0.681,64,1.149,65,0.94,66,1.149,67,0.94,68,0.899,69,1.105,70,1.434,71,1.343,72,1.348,73,0.013,74,0.018,75,0.013,740,2.262,743,3.881,744,2.705]],["title/classes/UpdateMessage.html",[0,0.079,66,0.956]],["body/classes/UpdateMessage.html",[0,0.153,1,1.08,2,0.965,3,0.329,4,0.292,5,0.292,6,0.891,7,1.635,8,1.87,9,0.222,10,0.772,12,1.234,13,2.474,14,0.724,15,1.129,17,0.772,20,0.032,24,0.591,25,0.591,26,1.135,27,0.61,28,0.591,29,0.451,30,1.068,31,1.046,32,0.965,33,1.046,34,1.046,35,1.364,36,0.717,37,1.135,38,0.759,39,1.49,40,1.49,41,1.49,42,1.49,43,1.49,44,1.49,45,1.49,46,1.49,47,1.49,48,1.135,49,1.135,50,1.388,51,1.135,52,1.882,53,1.486,54,0.965,55,1.135,56,0.996,57,1.135,58,2.253,59,1.449,60,1.135,61,1.171,62,0.965,63,0.7,64,1.171,65,0.965,66,1.364,67,1.374,68,0.917,69,1.135,70,1.08,71,1.171,72,0.965,73,0.013,74,0.019,75,0.013,745,3.957]],["title/interfaces/configState.html",[30,0.688,598,1.435]],["body/interfaces/configState.html",[3,0.386,4,0.342,5,0.342,8,0.964,9,0.26,10,0.862,12,1.067,14,0.636,20,0.032,24,0.694,27,0.431,29,0.813,30,1.067,36,0.636,38,0.89,54,1.132,56,1.415,62,1.132,63,1.459,65,1.132,67,1.132,70,1.468,72,1.132,73,0.015,74,0.021,75,0.015,115,3.307,139,2.807,141,2.271,155,2.297,306,2.141,343,3.383,348,1.902,397,1.728,403,2.864,527,2.374,564,2.374,565,2.141,598,1.963,599,2.112,600,1.902,601,3.918,602,2.927,603,2.725,605,3.643,606,3.643,607,3.643,608,2.725,609,2.374,610,2.374,611,2.374,612,2.725,613,2.725,614,4.701,615,2.725,616,2.725,617,4.498,618,2.725,619,3.22,620,2.725,621,2.725,622,3.696,623,3.696,624,2.725,625,2.725]],["title/coverage.html",[746,3.675]],["body/coverage.html",[0,0.15,1,0.862,5,0.331,6,1.947,12,0.672,14,0.374,20,0.032,29,0.512,30,0.672,50,0.795,53,0.934,56,0.795,59,0.862,61,0.934,64,0.934,66,0.934,68,0.731,71,0.934,73,0.015,74,0.021,75,0.015,78,1.843,79,1.29,85,2.64,102,2.046,104,2.046,128,1.402,154,1.529,155,1.29,166,2.64,205,1.29,207,1.29,209,1.29,253,2.525,260,2.046,262,2.3,290,2.3,291,2.64,304,2.046,315,2.64,397,3.507,505,2.192,507,2.64,511,2.046,513,2.046,565,1.529,570,2.64,598,2.192,600,3.098,602,1.843,610,2.3,626,2.3,628,2.64,651,2.64,672,2.64,673,2.64,684,2.64,746,2.64,747,3.157,748,3.157,749,3.157,750,4.934,751,3.157,752,3.157,753,4.934,754,3.157,755,4.934,756,5.742,757,4.325,758,4.325,759,3.157,760,6.297,761,6.254,762,4.917,763,2.64,764,2.64,765,2.64,766,3.617,767,2.64,768,2.64,769,3.157,770,3.157]],["title/dependencies.html",[215,2.515,771,2.706]],["body/dependencies.html",[20,0.032,28,1.089,73,0.019,74,0.024,75,0.019,107,1.975,126,1.417,131,2.273,136,1.975,215,2.643,236,2.381,238,4.28,239,3.316,244,2.643,247,3.411,249,3.623,250,3.411,252,2.971,263,2.971,264,2.971,266,3.411,267,2.971,268,2.971,348,2.381,384,3.411,393,3.411,401,2.643,586,3.411,587,3.411,772,6.326,773,4.078,774,4.078,775,4.078,776,4.078,777,5.864,778,4.078,779,4.078,780,4.078,781,4.078,782,4.078,783,4.078,784,5.117,785,4.078,786,4.078,787,4.078,788,4.078,789,4.078,790,4.078,791,4.078,792,4.078,793,4.078,794,4.078,795,4.078]],["title/miscellaneous/enumerations.html",[796,1.202,797,3.246]],["body/miscellaneous/enumerations.html",[6,1.46,9,0.364,20,0.031,25,1.383,33,1.714,34,1.714,35,1.348,38,1.495,39,2.062,40,2.062,41,2.062,42,2.062,43,2.062,44,2.062,45,2.062,46,2.062,47,2.062,73,0.022,74,0.026,75,0.022,796,2.023,797,3.809,798,3.809]],["title/miscellaneous/functions.html",[796,1.202,799,3.246]],["body/miscellaneous/functions.html",[8,1.705,9,0.396,19,1.249,20,0.029,21,1.056,22,1.149,63,1.249,73,0.024,74,0.027,75,0.024,262,4.196,600,2.896,611,3.614,796,2.204,799,4.149,800,4.149]],["title/index.html",[9,0.216,801,2.706,802,2.706]],["body/index.html",[4,0.426,20,0.024,21,0.864,73,0.019,74,0.024,75,0.019,78,1.938,89,2.152,154,1.966,228,2.957,296,3.395,489,4.896,536,3.395,803,4.059,804,5.102,805,4.059,806,5.58,807,5.58,808,4.059,809,4.059,810,4.059,811,5.102,812,6.032,813,6.249,814,4.059,815,4.059,816,4.059,817,4.059,818,4.059,819,4.059,820,4.059,821,4.059,822,4.059,823,5.58,824,5.58,825,4.059,826,6.032,827,4.059,828,4.059,829,4.059,830,4.059,831,4.059,832,4.059,833,3.395,834,5.102,835,5.102,836,5.854,837,4.059,838,5.102,839,5.102,840,4.059,841,4.059,842,4.059,843,5.58,844,4.059,845,4.059,846,4.059,847,4.059]],["title/modules.html",[214,2.565]],["body/modules.html",[20,0.028,73,0.024,74,0.028,75,0.024,213,3.262,214,2.938,224,2.938,239,3.262,848,5.034,849,5.034,850,5.809,851,5.034,852,5.034]],["title/overview.html",[853,3.675]],["body/overview.html",[2,1.473,20,0.03,73,0.02,74,0.025,75,0.02,79,2.577,80,2.474,198,2.248,205,2.325,207,2.325,209,2.325,212,2.747,213,4.273,214,2.474,215,2.747,216,3.545,217,3.545,218,3.545,219,3.088,220,3.545,221,3.545,222,3.545,223,3.545,224,3.322,225,4.146,226,4.384,227,3.088,228,3.088,303,2.747,401,2.747,506,2.747,599,2.747,626,3.088,733,3.545,853,3.545,854,4.239,855,5.242,856,5.242]],["title/routes.html",[303,2.847]],["body/routes.html",[20,0.028,73,0.025,74,0.028,75,0.025,303,3.35]],["title/miscellaneous/typealiases.html",[796,1.202,857,3.882]],["body/miscellaneous/typealiases.html",[1,1.317,6,1.546,9,0.385,14,0.571,20,0.031,35,1.677,50,1.214,53,1.427,59,1.317,61,1.427,64,1.427,66,1.427,68,1.117,71,1.427,73,0.023,74,0.027,75,0.023,796,2.142,798,4.033,858,4.822]],["title/miscellaneous/variables.html",[796,1.202,859,3.246]],["body/miscellaneous/variables.html",[9,0.26,14,0.636,20,0.032,24,1.327,25,1.327,29,0.527,56,1.261,63,1.592,70,0.888,73,0.015,74,0.021,75,0.015,102,2.86,104,2.86,128,1.961,139,2.806,155,2.047,253,3.136,356,2.72,397,2.34,403,3.247,565,2.138,600,1.898,601,2.37,602,2.925,605,2.108,606,2.108,607,2.108,619,3.216,762,2.72,763,3.692,764,2.72,765,2.72,766,2.72,767,3.692,768,3.692,796,1.445,800,2.72,833,3.692,859,2.72,860,4.414,861,5.926,862,3.253,863,3.253,864,3.253,865,3.253,866,5.793,867,4.414,868,3.253,869,5.374,870,3.253,871,5.374,872,3.253,873,4.414,874,4.414,875,4.414,876,4.414,877,4.414,878,4.414]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":397,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":734,"title":{},"body":{"components/SettingsComponent.html":{}}}],["0.17.0",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["0.7.5",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0a0a0a",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["1",{"_index":401,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["1.0.4",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["1.30.1",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["1.5em",{"_index":174,"title":{},"body":{"components/AppComponent.html":{}}}],["1.9.0",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":733,"title":{},"body":{"components/SettingsComponent.html":{},"overview.html":{}}}],["10.0.4",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["1000",{"_index":424,"title":{},"body":{"components/ChatComponent.html":{}}}],["1023px",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["12",{"_index":720,"title":{},"body":{"components/SettingsComponent.html":{}}}],["12px",{"_index":482,"title":{},"body":{"components/ChatComponent.html":{}}}],["16px/1.3",{"_index":464,"title":{},"body":{"components/ChatComponent.html":{}}}],["1px",{"_index":171,"title":{},"body":{"components/AppComponent.html":{},"components/SettingsComponent.html":{}}}],["2",{"_index":854,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["2.25em",{"_index":727,"title":{},"body":{"components/SettingsComponent.html":{}}}],["2/3",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["220px",{"_index":468,"title":{},"body":{"components/ChatComponent.html":{}}}],["24",{"_index":718,"title":{},"body":{"components/SettingsComponent.html":{}}}],["24px",{"_index":498,"title":{},"body":{"components/ChatComponent.html":{}}}],["25",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["2px",{"_index":493,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["3",{"_index":856,"title":{},"body":{"overview.html":{}}}],["3000",{"_index":540,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["4",{"_index":855,"title":{},"body":{"overview.html":{}}}],["4px",{"_index":728,"title":{},"body":{"components/SettingsComponent.html":{}}}],["5.0.2",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":166,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["5em",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["5px",{"_index":483,"title":{},"body":{"components/ChatComponent.html":{}}}],["6.4.0",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":809,"title":{},"body":{"index.html":{}}}],["8.1.0",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["8em",{"_index":480,"title":{},"body":{"components/ChatComponent.html":{}}}],["8px",{"_index":473,"title":{},"body":{"components/ChatComponent.html":{}}}],["9c0201",{"_index":486,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["_activemenu",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["_socket",{"_index":571,"title":{},"body":{"injectables/ChatService.html":{}}}],["absolute",{"_index":179,"title":{},"body":{"components/AppComponent.html":{}}}],["accessors",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"components/SettingsComponent.html":{}}}],["action",{"_index":8,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/functions.html":{}}}],["action.config",{"_index":527,"title":{},"body":{"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.message",{"_index":620,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.message.read",{"_index":618,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.message].filter(message",{"_index":621,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.messages.map(message",{"_index":616,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.state",{"_index":615,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["action.type",{"_index":613,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["actions",{"_index":35,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["actions/chat.action",{"_index":564,"title":{},"body":{"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["actiontypes",{"_index":38,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/enumerations.html":{}}}],["actiontypes.add_message",{"_index":26,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["actiontypes.add_message_success",{"_index":65,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["actiontypes.load_config",{"_index":60,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["actiontypes.load_config_success",{"_index":62,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["actiontypes.start_app",{"_index":51,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["actiontypes.start_app_success",{"_index":54,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["actiontypes.update_config",{"_index":69,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["actiontypes.update_config_success",{"_index":72,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["actiontypes.update_message",{"_index":67,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["activatedroutesnapshot",{"_index":631,"title":{},"body":{"guards/IsExistName.html":{}}}],["active",{"_index":196,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["activeblink",{"_index":319,"title":{},"body":{"components/ChatComponent.html":{}}}],["activemenu",{"_index":103,"title":{},"body":{"components/AppComponent.html":{}}}],["activemenu(value",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["actual_component",{"_index":211,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["add_message",{"_index":43,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["add_message_success",{"_index":44,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["addemoji",{"_index":327,"title":{},"body":{"components/ChatComponent.html":{}}}],["addemoji($event",{"_index":339,"title":{},"body":{"components/ChatComponent.html":{}}}],["addmessage",{"_index":1,"title":{"classes/AddMessage.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["addmessagesuccess",{"_index":64,"title":{"classes/AddMessageSuccess.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["addmessagesuccess(data",{"_index":556,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["aftercontentinit",{"_index":379,"title":{},"body":{"components/ChatComponent.html":{}}}],["afterviewchecked",{"_index":380,"title":{},"body":{"components/ChatComponent.html":{}}}],["afterviewinit",{"_index":378,"title":{},"body":{"components/ChatComponent.html":{}}}],["aliases",{"_index":858,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":188,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["angular",{"_index":806,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":393,"title":{},"body":{"components/ChatComponent.html":{},"dependencies.html":{}}}],["angular/common",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/compiler",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":389,"title":{},"body":{"components/ChatComponent.html":{}}}],["animate(\"100ms",{"_index":405,"title":{},"body":{"components/ChatComponent.html":{}}}],["animations",{"_index":394,"title":{},"body":{"components/ChatComponent.html":{}}}],["app",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["app.component",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["app.component.html",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":92,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":79,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appmodule",{"_index":213,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":290,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["approutelist",{"_index":307,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["approutingmodule",{"_index":224,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":57,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["artifacts",{"_index":827,"title":{},"body":{"index.html":{}}}],["async",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["auto",{"_index":471,"title":{},"body":{"components/ChatComponent.html":{}}}],["automatically",{"_index":818,"title":{},"body":{"index.html":{}}}],["available",{"_index":852,"title":{},"body":{"modules.html":{}}}],["background",{"_index":169,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["baractionmessage",{"_index":494,"title":{},"body":{"components/ChatComponent.html":{}}}],["black",{"_index":168,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["block",{"_index":404,"title":{},"body":{"components/ChatComponent.html":{}}}],["blur",{"_index":702,"title":{},"body":{"components/SettingsComponent.html":{}}}],["body",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["boolean",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"interfaces/Message.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{}}}],["bootstrap",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":164,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["bottom",{"_index":496,"title":{},"body":{"components/ChatComponent.html":{}}}],["box",{"_index":729,"title":{},"body":{"components/SettingsComponent.html":{}}}],["boxmessages",{"_index":456,"title":{},"body":{"components/ChatComponent.html":{}}}],["boxscroll",{"_index":320,"title":{},"body":{"components/ChatComponent.html":{}}}],["browse",{"_index":850,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":297,"title":{},"body":{"classes/AppPage.html":{}}}],["browser/animations",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["bubbles",{"_index":475,"title":{},"body":{"components/ChatComponent.html":{}}}],["build",{"_index":826,"title":{},"body":{"index.html":{}}}],["bulma",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["cachedmessages",{"_index":321,"title":{},"body":{"components/ChatComponent.html":{}}}],["calc(0.375em",{"_index":726,"title":{},"body":{"components/SettingsComponent.html":{}}}],["calc(100vh",{"_index":467,"title":{},"body":{"components/ChatComponent.html":{}}}],["canactivate",{"_index":310,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/IsExistName.html":{}}}],["canactivate(route",{"_index":630,"title":{},"body":{"guards/IsExistName.html":{}}}],["case",{"_index":614,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["center",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{}}}],["change",{"_index":536,"title":{},"body":{"injectables/ChatEffects.html":{},"index.html":{}}}],["chat",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["chat'},{'name",{"_index":206,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["chat.component.html",{"_index":318,"title":{},"body":{"components/ChatComponent.html":{}}}],["chat.component.scss",{"_index":317,"title":{},"body":{"components/ChatComponent.html":{}}}],["chat/chat.component",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["chat_chat_config",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chatcomponent",{"_index":205,"title":{"components/ChatComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["chateffects",{"_index":260,"title":{"injectables/ChatEffects.html":{}},"body":{"modules/AppModule.html":{},"injectables/ChatEffects.html":{},"coverage.html":{}}}],["chatreducer",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["chatreducer(state",{"_index":611,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{},"miscellaneous/functions.html":{}}}],["chatservice",{"_index":513,"title":{"injectables/ChatService.html":{}},"body":{"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"coverage.html":{}}}],["chatstate",{"_index":29,"title":{"interfaces/ChatState.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":846,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/AppPage.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/AppPage.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"overview.html":{}}}],["cli",{"_index":807,"title":{},"body":{"index.html":{}}}],["client",{"_index":587,"title":{},"body":{"injectables/ChatService.html":{},"dependencies.html":{}}}],["clock",{"_index":717,"title":{},"body":{"components/SettingsComponent.html":{}}}],["clock12hour",{"_index":606,"title":{},"body":{"interfaces/ChatState.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["close",{"_index":500,"title":{},"body":{"components/ChatComponent.html":{}}}],["cluster_appmodule",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":821,"title":{},"body":{"index.html":{}}}],["color",{"_index":167,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["color:white",{"_index":485,"title":{},"body":{"components/ChatComponent.html":{}}}],["column",{"_index":461,"title":{},"body":{"components/ChatComponent.html":{}}}],["component",{"_index":78,"title":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":203,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["components",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["config",{"_index":70,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["config.clock12hour",{"_index":449,"title":{},"body":{"components/ChatComponent.html":{}}}],["config.shortcutenter",{"_index":435,"title":{},"body":{"components/ChatComponent.html":{}}}],["config.themedark",{"_index":148,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["configchange",{"_index":524,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["configchange.join",{"_index":538,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["configchange.push(property",{"_index":532,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["configstate",{"_index":30,"title":{"interfaces/configState.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{}}}],["const",{"_index":306,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{}}}],["constants",{"_index":33,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["constructor(config",{"_index":740,"title":{},"body":{"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{}}}],["constructor(lsstorage",{"_index":510,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["constructor(message",{"_index":16,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{}}}],["constructor(messages",{"_index":737,"title":{},"body":{"classes/StartSuccess.html":{}}}],["constructor(private",{"_index":137,"title":{},"body":{"components/AppComponent.html":{},"guards/IsExistName.html":{},"components/SettingsComponent.html":{}}}],["constructor(public",{"_index":58,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["constructor(state",{"_index":648,"title":{},"body":{"classes/LoadSuccess.html":{}}}],["constructor(store",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["context",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["countnotread",{"_index":601,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":746,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":52,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["createselector(getchatstate",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctrl",{"_index":722,"title":{},"body":{"components/SettingsComponent.html":{}}}],["ctrl/ngx",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["dark",{"_index":716,"title":{},"body":{"components/SettingsComponent.html":{}}}],["date",{"_index":348,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"interfaces/Message.html":{},"interfaces/configState.html":{},"dependencies.html":{}}}],["datefns",{"_index":383,"title":{},"body":{"components/ChatComponent.html":{}}}],["datefns.format(date",{"_index":450,"title":{},"body":{"components/ChatComponent.html":{}}}],["declarations",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":519,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["default",{"_index":24,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":34,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["dependencies",{"_index":215,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":430,"title":{},"body":{"components/ChatComponent.html":{},"classes/Load.html":{},"interfaces/Message.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{}}}],["dev",{"_index":815,"title":{},"body":{"index.html":{}}}],["development",{"_index":810,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["direction",{"_index":460,"title":{},"body":{"components/ChatComponent.html":{}}}],["directive",{"_index":201,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["directives",{"_index":210,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":825,"title":{},"body":{"index.html":{}}}],["directory",{"_index":830,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":98,"title":{},"body":{"components/AppComponent.html":{}}}],["dispatch",{"_index":569,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["display",{"_index":398,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["dist",{"_index":829,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":387,"title":{},"body":{"components/ChatComponent.html":{}}}],["distinctuntilchanged",{"_index":386,"title":{},"body":{"components/ChatComponent.html":{},"guards/IsExistName.html":{}}}],["div",{"_index":477,"title":{},"body":{"components/ChatComponent.html":{}}}],["document.getelementbyid(\"boxscroll",{"_index":410,"title":{},"body":{"components/ChatComponent.html":{}}}],["documentation",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["dynamic",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":841,"title":{},"body":{"index.html":{}}}],["e2e/src/app.po.ts",{"_index":291,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":295,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":294,"title":{},"body":{"classes/AppPage.html":{}}}],["ease",{"_index":406,"title":{},"body":{"components/ChatComponent.html":{}}}],["effect",{"_index":544,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["effect({dispatch",{"_index":520,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["effectsmodule",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["effectsmodule.forroot([chateffects",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["element",{"_index":200,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["element(by.css('app",{"_index":299,"title":{},"body":{"classes/AppPage.html":{}}}],["embed",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"dependencies.html":{}}}],["embedservice",{"_index":336,"title":{},"body":{"components/ChatComponent.html":{}}}],["embedvideo",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"overview.html":{}}}],["embedvideo(texte",{"_index":342,"title":{},"body":{"components/ChatComponent.html":{}}}],["embedvideo.forroot",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["embedvideoservice",{"_index":337,"title":{},"body":{"components/ChatComponent.html":{}}}],["emitevent",{"_index":706,"title":{},"body":{"components/SettingsComponent.html":{}}}],["emoji",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"dependencies.html":{}}}],["end",{"_index":489,"title":{},"body":{"components/ChatComponent.html":{},"index.html":{}}}],["enter",{"_index":670,"title":{},"body":{"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["enum",{"_index":37,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["enumerations",{"_index":797,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":588,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SessionstorageService.html":{}}}],["env.urlserver",{"_index":581,"title":{},"body":{"injectables/ChatService.html":{}}}],["environment",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChatService.html":{},"injectables/SessionstorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.production",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environment",{"_index":679,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["event",{"_index":341,"title":{},"body":{"components/ChatComponent.html":{}}}],["event.emoji.native",{"_index":439,"title":{},"body":{"components/ChatComponent.html":{}}}],["event.preventdefault",{"_index":436,"title":{},"body":{"components/ChatComponent.html":{}}}],["example",{"_index":646,"title":{},"body":{"classes/Load.html":{},"classes/StartSuccess.html":{}}}],["execute",{"_index":838,"title":{},"body":{"index.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["exports",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"overview.html":{}}}],["extension",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":139,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["false).length",{"_index":622,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{}}}],["files",{"_index":820,"title":{},"body":{"index.html":{}}}],["firstinitmessages",{"_index":322,"title":{},"body":{"components/ChatComponent.html":{}}}],["fixed",{"_index":495,"title":{},"body":{"components/ChatComponent.html":{}}}],["flag",{"_index":832,"title":{},"body":{"index.html":{}}}],["flex",{"_index":459,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["flexbox",{"_index":457,"title":{},"body":{"components/ChatComponent.html":{}}}],["fns",{"_index":384,"title":{},"body":{"components/ChatComponent.html":{},"dependencies.html":{}}}],["font",{"_index":176,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["formatdateampm",{"_index":328,"title":{},"body":{"components/ChatComponent.html":{}}}],["formatdateampm(date",{"_index":346,"title":{},"body":{"components/ChatComponent.html":{}}}],["formatdateampm(message.date",{"_index":455,"title":{},"body":{"components/ChatComponent.html":{}}}],["formcontrol",{"_index":363,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["formcontrol(false",{"_index":703,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formgroup",{"_index":695,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formsmodule",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["full",{"_index":313,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fullheight",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["function",{"_index":610,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{},"coverage.html":{}}}],["functions",{"_index":799,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":842,"title":{},"body":{"index.html":{}}}],["general",{"_index":462,"title":{},"body":{"components/ChatComponent.html":{}}}],["generate",{"_index":823,"title":{},"body":{"index.html":{}}}],["generated",{"_index":805,"title":{},"body":{"index.html":{}}}],["getactivemenu",{"_index":118,"title":{},"body":{"components/AppComponent.html":{}}}],["getallmessage",{"_index":573,"title":{},"body":{"injectables/ChatService.html":{}}}],["getchatstate",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconfig",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconfig[property",{"_index":530,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["getconfigsubscription",{"_index":434,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["getcount",{"_index":122,"title":{},"body":{"components/AppComponent.html":{}}}],["getisdark",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["getislogin",{"_index":116,"title":{},"body":{"components/AppComponent.html":{}}}],["getisshorcut",{"_index":376,"title":{},"body":{"components/ChatComponent.html":{}}}],["getmessages",{"_index":371,"title":{},"body":{"components/ChatComponent.html":{}}}],["getnewmessage",{"_index":574,"title":{},"body":{"injectables/ChatService.html":{}}}],["getsocket",{"_index":583,"title":{},"body":{"injectables/ChatService.html":{}}}],["getting",{"_index":801,"title":{"index.html":{}},"body":{}}],["gettitletext",{"_index":292,"title":{},"body":{"classes/AppPage.html":{}}}],["getusernamestore",{"_index":373,"title":{},"body":{"components/ChatComponent.html":{}}}],["go",{"_index":845,"title":{},"body":{"index.html":{}}}],["graph",{"_index":851,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":173,"title":{},"body":{"components/AppComponent.html":{}}}],["guard",{"_index":626,"title":{"guards/IsExistName.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":627,"title":{},"body":{"guards/IsExistName.html":{}}}],["h1')).gettext",{"_index":300,"title":{},"body":{"classes/AppPage.html":{}}}],["handle",{"_index":49,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["height",{"_index":175,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["help",{"_index":843,"title":{},"body":{"index.html":{}}}],["hero",{"_index":186,"title":{},"body":{"components/AppComponent.html":{}}}],["hero.is",{"_index":183,"title":{},"body":{"components/AppComponent.html":{}}}],["hh:mm",{"_index":451,"title":{},"body":{"components/ChatComponent.html":{}}}],["hours",{"_index":719,"title":{},"body":{"components/SettingsComponent.html":{}}}],["html",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["http://localhost:3000",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":817,"title":{},"body":{"index.html":{}}}],["httpclientmodule",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["https?://)?(www.)?(youtube.com|youtu.?be",{"_index":368,"title":{},"body":{"components/ChatComponent.html":{}}}],["identifier",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["if(config.username",{"_index":663,"title":{},"body":{"components/LoginComponent.html":{}}}],["if(configchange[0",{"_index":541,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["if(this.username.valid",{"_index":666,"title":{},"body":{"components/LoginComponent.html":{}}}],["image",{"_index":444,"title":{},"body":{"components/ChatComponent.html":{}}}],["implementation",{"_index":48,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["imports",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["initialstate",{"_index":565,"title":{},"body":{"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initialstate.config",{"_index":667,"title":{},"body":{"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["injectable",{"_index":505,"title":{"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"injectables/SessionstorageService.html":{}},"body":{"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"injectables/SessionstorageService.html":{},"coverage.html":{}}}],["injectables",{"_index":506,"title":{},"body":{"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"injectables/SessionstorageService.html":{},"overview.html":{}}}],["input",{"_index":735,"title":{},"body":{"components/SettingsComponent.html":{}}}],["inset",{"_index":731,"title":{},"body":{"components/SettingsComponent.html":{}}}],["interface",{"_index":598,"title":{"interfaces/ChatState.html":{},"interfaces/Message.html":{},"interfaces/configState.html":{}},"body":{"interfaces/ChatState.html":{},"interfaces/Message.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"coverage.html":{}}}],["interfaces",{"_index":599,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/Message.html":{},"interfaces/configState.html":{},"overview.html":{}}}],["io",{"_index":585,"title":{},"body":{"injectables/ChatService.html":{}}}],["io(this.url",{"_index":591,"title":{},"body":{"injectables/ChatService.html":{}}}],["isactive",{"_index":687,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isactive(value",{"_index":689,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isdark",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["isembedvideo",{"_index":329,"title":{},"body":{"components/ChatComponent.html":{}}}],["isembedvideo(texte",{"_index":349,"title":{},"body":{"components/ChatComponent.html":{}}}],["isexistname",{"_index":304,"title":{"guards/IsExistName.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/IsExistName.html":{},"coverage.html":{}}}],["isexistname.guard",{"_index":305,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["isload",{"_index":639,"title":{},"body":{"guards/IsExistName.html":{}}}],["isloadconfig",{"_index":602,"title":{},"body":{"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isloading",{"_index":323,"title":{},"body":{"components/ChatComponent.html":{}}}],["islogin",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"guards/IsExistName.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isshorcut",{"_index":335,"title":{},"body":{"components/ChatComponent.html":{}}}],["items",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["jasmine",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":671,"title":{},"body":{"components/LoginComponent.html":{}}}],["json.parse(sessionstorage.getitem(env.nlocalstorage",{"_index":681,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["json.stringify(messages",{"_index":418,"title":{},"body":{"components/ChatComponent.html":{}}}],["json.stringify(newconfig",{"_index":683,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["json.stringify(this.cachedmessages",{"_index":417,"title":{},"body":{"components/ChatComponent.html":{}}}],["karma",{"_index":840,"title":{},"body":{"index.html":{}}}],["label",{"_index":725,"title":{},"body":{"components/SettingsComponent.html":{}}}],["last",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["left",{"_index":497,"title":{},"body":{"components/ChatComponent.html":{}}}],["left:0",{"_index":503,"title":{},"body":{"components/ChatComponent.html":{}}}],["legend",{"_index":198,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["li",{"_index":476,"title":{},"body":{"components/ChatComponent.html":{}}}],["li.ours",{"_index":487,"title":{},"body":{"components/ChatComponent.html":{}}}],["light",{"_index":715,"title":{},"body":{"components/SettingsComponent.html":{}}}],["linkifyjs",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["list",{"_index":469,"title":{},"body":{"components/ChatComponent.html":{}}}],["literal",{"_index":604,"title":{},"body":{"interfaces/ChatState.html":{}}}],["load",{"_index":59,"title":{"classes/Load.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["load_config",{"_index":41,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["load_config_success",{"_index":42,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["loadconfig",{"_index":508,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["loadsuccess",{"_index":61,"title":{"classes/LoadSuccess.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["loadsuccess(initialstate.config",{"_index":553,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["loadsuccess(lsconfig",{"_index":551,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["log",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":309,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{}}}],["login'},{'name",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["login.component.html",{"_index":653,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":652,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/login.component",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["logincomponent",{"_index":207,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["logonly",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["lsconfig",{"_index":550,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["lsstorage",{"_index":515,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["map",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"components/SettingsComponent.html":{}}}],["map((lsconfig",{"_index":549,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["map((messages",{"_index":561,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["map(action",{"_index":523,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["map(config",{"_index":448,"title":{},"body":{"components/ChatComponent.html":{}}}],["map(data",{"_index":517,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["marbles",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["margin",{"_index":470,"title":{},"body":{"components/ChatComponent.html":{}}}],["mart",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"dependencies.html":{}}}],["matching",{"_index":74,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["maxage",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["media",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["menu.is",{"_index":195,"title":{},"body":{"components/AppComponent.html":{}}}],["mergemap",{"_index":559,"title":{},"body":{"injectables/ChatEffects.html":{},"guards/IsExistName.html":{}}}],["mergemap(islogin",{"_index":641,"title":{},"body":{"guards/IsExistName.html":{}}}],["mergemap(messages",{"_index":547,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["message",{"_index":12,"title":{"interfaces/Message.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"interfaces/Message.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{}}}],["message.name",{"_index":454,"title":{},"body":{"components/ChatComponent.html":{}}}],["message.read",{"_index":617,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["messages",{"_index":56,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["meta",{"_index":478,"title":{},"body":{"components/ChatComponent.html":{}}}],["metadata",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["methods",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{}}}],["miscellaneous",{"_index":796,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["models/message",{"_index":32,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["module",{"_index":212,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":214,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":844,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nameformcontrol",{"_index":690,"title":{},"body":{"components/SettingsComponent.html":{}}}],["nav.navbar",{"_index":160,"title":{},"body":{"components/AppComponent.html":{}}}],["navbar",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["navigate",{"_index":816,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":293,"title":{},"body":{"classes/AppPage.html":{}}}],["new",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"index.html":{}}}],["newconfig",{"_index":526,"title":{},"body":{"injectables/ChatEffects.html":{},"injectables/SessionstorageService.html":{}}}],["newconfig.username",{"_index":542,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["newconfig[property",{"_index":531,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["newstates",{"_index":623,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["newstates.filter(message",{"_index":625,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["ng",{"_index":813,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngondestroy",{"_index":330,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["ngrx",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ngrx/effects",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"dependencies.html":{}}}],["ngrx/reducers/chat.reducers",{"_index":680,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["ngrx/router",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":28,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"dependencies.html":{}}}],["ngx",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"dependencies.html":{}}}],["ngxlinkifyjsmodule",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxlinkifyjsmodule.forroot",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["nlocalstorage",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":399,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["normal",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["notifnotread",{"_index":163,"title":{},"body":{"components/AppComponent.html":{}}}],["null",{"_index":356,"title":{},"body":{"components/ChatComponent.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":603,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["object",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/SettingsComponent.html":{}}}],["observable.create((observer",{"_index":593,"title":{},"body":{"injectables/ChatService.html":{}}}],["observer.next(message",{"_index":595,"title":{},"body":{"injectables/ChatService.html":{}}}],["observer.next(messages",{"_index":597,"title":{},"body":{"injectables/ChatService.html":{}}}],["of(false",{"_index":644,"title":{},"body":{"guards/IsExistName.html":{}}}],["of(this.lsstorage.getconfig",{"_index":548,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["of(true",{"_index":645,"title":{},"body":{"guards/IsExistName.html":{}}}],["oftype",{"_index":382,"title":{},"body":{"components/ChatComponent.html":{},"injectables/ChatEffects.html":{}}}],["oftype(actiontypes.add_message",{"_index":412,"title":{},"body":{"components/ChatComponent.html":{},"injectables/ChatEffects.html":{}}}],["oftype(actiontypes.add_message_success",{"_index":414,"title":{},"body":{"components/ChatComponent.html":{}}}],["oftype(actiontypes.load_config",{"_index":546,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["oftype(actiontypes.start_app",{"_index":558,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["oftype(actiontypes.update_config",{"_index":522,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["ondestroy",{"_index":316,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["oninit",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["onscroll",{"_index":331,"title":{},"body":{"components/ChatComponent.html":{}}}],["onscroll($event",{"_index":353,"title":{},"body":{"components/ChatComponent.html":{}}}],["opacity",{"_index":396,"title":{},"body":{"components/ChatComponent.html":{}}}],["opensmiley",{"_index":324,"title":{},"body":{"components/ChatComponent.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["overflow",{"_index":474,"title":{},"body":{"components/ChatComponent.html":{}}}],["overlayblink",{"_index":501,"title":{},"body":{"components/ChatComponent.html":{}}}],["overview",{"_index":853,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":771,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":472,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["padding:8px",{"_index":481,"title":{},"body":{"components/ChatComponent.html":{}}}],["param",{"_index":55,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"miscellaneous/functions.html":{}}}],["path",{"_index":308,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pathmatch",{"_index":312,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pickermodule",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe(map(config",{"_index":441,"title":{},"body":{"components/ChatComponent.html":{}}}],["pipe(take(1",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["please",{"_index":492,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["position",{"_index":178,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["positionclass",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["primary",{"_index":484,"title":{},"body":{"components/ChatComponent.html":{}}}],["private",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["prod",{"_index":831,"title":{},"body":{"index.html":{}}}],["production",{"_index":833,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":804,"title":{},"body":{"index.html":{}}}],["promise",{"_index":298,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{}}}],["property",{"_index":529,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["protractor",{"_index":296,"title":{},"body":{"classes/AppPage.html":{},"index.html":{}}}],["providedin",{"_index":568,"title":{},"body":{"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"injectables/SessionstorageService.html":{}}}],["providers",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":11,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{}}}],["radiobox",{"_index":724,"title":{},"body":{"components/SettingsComponent.html":{}}}],["radius",{"_index":165,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["reactiveformsmodule",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":609,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/Message.html":{},"interfaces/configState.html":{}}}],["readme",{"_index":847,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["receivemessage",{"_index":509,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["redirectto",{"_index":311,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reducers/chat.reducers",{"_index":31,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{}}}],["regexp",{"_index":367,"title":{},"body":{"components/ChatComponent.html":{}}}],["regexyoutube",{"_index":325,"title":{},"body":{"components/ChatComponent.html":{}}}],["reload",{"_index":819,"title":{},"body":{"index.html":{}}}],["representing",{"_index":408,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["require",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["restrict",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["result",{"_index":73,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":75,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["return",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{}}}],["returns",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{}}}],["rgb(255,255,255",{"_index":502,"title":{},"body":{"components/ChatComponent.html":{}}}],["rgba(10",{"_index":732,"title":{},"body":{"components/SettingsComponent.html":{}}}],["right",{"_index":180,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["root",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"injectables/SessionstorageService.html":{}}}],["root'},{'name",{"_index":204,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["route",{"_index":634,"title":{},"body":{"guards/IsExistName.html":{}}}],["router",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{}}}],["routermodule",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["routermodule.forroot",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.forroot(approutelist",{"_index":314,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":632,"title":{},"body":{"guards/IsExistName.html":{}}}],["routes",{"_index":303,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":302,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":812,"title":{},"body":{"index.html":{}}}],["running",{"_index":834,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":135,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"components/SettingsComponent.html":{}}}],["rxjschat",{"_index":803,"title":{},"body":{"index.html":{}}}],["sans",{"_index":465,"title":{},"body":{"components/ChatComponent.html":{}}}],["scaffolding",{"_index":822,"title":{},"body":{"index.html":{}}}],["screen",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["scss",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["select",{"_index":635,"title":{},"body":{"guards/IsExistName.html":{}}}],["select(getconfig",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["select(isloadconfig",{"_index":637,"title":{},"body":{"guards/IsExistName.html":{}}}],["select(islogin",{"_index":640,"title":{},"body":{"guards/IsExistName.html":{}}}],["selectconfig",{"_index":661,"title":{},"body":{"components/LoginComponent.html":{}}}],["selector",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["self",{"_index":488,"title":{},"body":{"components/ChatComponent.html":{}}}],["send",{"_index":427,"title":{},"body":{"components/ChatComponent.html":{}}}],["sendmessage",{"_index":332,"title":{},"body":{"components/ChatComponent.html":{},"injectables/ChatService.html":{}}}],["sendmessage($event",{"_index":355,"title":{},"body":{"components/ChatComponent.html":{}}}],["sendmessage(message",{"_index":579,"title":{},"body":{"injectables/ChatService.html":{}}}],["sendusername",{"_index":654,"title":{},"body":{"components/LoginComponent.html":{}}}],["serif",{"_index":466,"title":{},"body":{"components/ChatComponent.html":{}}}],["serve",{"_index":814,"title":{},"body":{"index.html":{}}}],["server",{"_index":811,"title":{},"body":{"index.html":{}}}],["services/app.chat.service",{"_index":567,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["services/sessionstorage.service",{"_index":566,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["sessionstorage.setitem(env.nlocalstorage",{"_index":682,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["sessionstorageservice",{"_index":511,"title":{"injectables/SessionstorageService.html":{}},"body":{"injectables/ChatEffects.html":{},"injectables/SessionstorageService.html":{},"coverage.html":{}}}],["set",{"_index":143,"title":{},"body":{"components/AppComponent.html":{}}}],["setactivemenu(value",{"_index":120,"title":{},"body":{"components/AppComponent.html":{}}}],["setconfig",{"_index":674,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["setconfig(newconfig",{"_index":677,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["settimeout",{"_index":420,"title":{},"body":{"components/ChatComponent.html":{}}}],["setting",{"_index":699,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":686,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.scss",{"_index":685,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings/settings.component",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["settingschangesubscription",{"_index":707,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settingscomponent",{"_index":209,"title":{"components/SettingsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["shadow",{"_index":730,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shared/models/message",{"_index":388,"title":{},"body":{"components/ChatComponent.html":{}}}],["shared/ngrx/actions/chat.action",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["shared/ngrx/effects/chat.effect",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/ngrx/reducers/chat.reducers",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["shared/ngrx/selectors/chat.selector",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["shorcut",{"_index":721,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shortcutenter",{"_index":607,"title":{},"body":{"interfaces/ChatState.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":491,"title":{},"body":{"components/ChatComponent.html":{}}}],["size",{"_index":479,"title":{},"body":{"components/ChatComponent.html":{}}}],["size:.8em",{"_index":177,"title":{},"body":{"components/AppComponent.html":{}}}],["socket",{"_index":575,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":586,"title":{},"body":{"injectables/ChatService.html":{},"dependencies.html":{}}}],["solid",{"_index":172,"title":{},"body":{"components/AppComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"index.html":{}}}],["spec\\.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":458,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/.../chat.action.ts",{"_index":798,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../chat.reducers.ts",{"_index":800,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../chat.selector.ts",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":301,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:16",{"_index":109,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:23",{"_index":113,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:25",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:29",{"_index":119,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:33",{"_index":121,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:37",{"_index":123,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:41",{"_index":114,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:45",{"_index":125,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:49",{"_index":110,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/chat/chat.component.ts",{"_index":315,"title":{},"body":{"components/ChatComponent.html":{},"coverage.html":{}}}],["src/app/chat/chat.component.ts:124",{"_index":357,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:152",{"_index":340,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:156",{"_index":374,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:160",{"_index":375,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:164",{"_index":377,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:170",{"_index":350,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:174",{"_index":344,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:178",{"_index":358,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:182",{"_index":347,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:194",{"_index":351,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:63",{"_index":370,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:64",{"_index":362,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:65",{"_index":365,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:67",{"_index":359,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:68",{"_index":369,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:72",{"_index":361,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:73",{"_index":366,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:74",{"_index":360,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:75",{"_index":338,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:82",{"_index":352,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:95",{"_index":354,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/chat/chat.component.ts:99",{"_index":372,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/isexistname.guard.ts",{"_index":628,"title":{},"body":{"guards/IsExistName.html":{},"coverage.html":{}}}],["src/app/isexistname.guard.ts:13",{"_index":629,"title":{},"body":{"guards/IsExistName.html":{}}}],["src/app/isexistname.guard.ts:16",{"_index":633,"title":{},"body":{"guards/IsExistName.html":{}}}],["src/app/login/login.component.ts",{"_index":651,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts:20",{"_index":659,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:21",{"_index":655,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:30",{"_index":657,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:39",{"_index":658,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:50",{"_index":656,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/settings/settings.component.ts",{"_index":684,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:24",{"_index":697,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:25",{"_index":696,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:27",{"_index":688,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:41",{"_index":693,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:62",{"_index":694,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:68",{"_index":691,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:72",{"_index":698,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:76",{"_index":692,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/shared/models/message.ts",{"_index":672,"title":{},"body":{"interfaces/Message.html":{},"coverage.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts",{"_index":6,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:29",{"_index":736,"title":{},"body":{"classes/Start.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:42",{"_index":738,"title":{},"body":{"classes/StartSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:48",{"_index":739,"title":{},"body":{"classes/StartSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:56",{"_index":647,"title":{},"body":{"classes/Load.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:64",{"_index":649,"title":{},"body":{"classes/LoadSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:66",{"_index":650,"title":{},"body":{"classes/LoadSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:70",{"_index":18,"title":{},"body":{"classes/AddMessage.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:72",{"_index":23,"title":{},"body":{"classes/AddMessage.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:76",{"_index":76,"title":{},"body":{"classes/AddMessageSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:78",{"_index":77,"title":{},"body":{"classes/AddMessageSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:82",{"_index":745,"title":{},"body":{"classes/UpdateMessage.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:88",{"_index":741,"title":{},"body":{"classes/UpdateConfig.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:90",{"_index":742,"title":{},"body":{"classes/UpdateConfig.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:94",{"_index":743,"title":{},"body":{"classes/UpdateConfigSuccess.html":{}}}],["src/app/shared/ngrx/actions/chat.action.ts:96",{"_index":744,"title":{},"body":{"classes/UpdateConfigSuccess.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts",{"_index":507,"title":{},"body":{"injectables/ChatEffects.html":{},"coverage.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:106",{"_index":514,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:35",{"_index":563,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:44",{"_index":554,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:58",{"_index":521,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:66",{"_index":557,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/effects/chat.effect.ts:73",{"_index":545,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["src/app/shared/ngrx/reducers/chat.reducers.ts",{"_index":600,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/ngrx/selectors/chat.selector.ts",{"_index":762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/services/app.chat.service.ts",{"_index":570,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/app/shared/services/app.chat.service.ts:12",{"_index":582,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/app.chat.service.ts:13",{"_index":576,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/app.chat.service.ts:19",{"_index":584,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/app.chat.service.ts:23",{"_index":580,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/app.chat.service.ts:27",{"_index":578,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/app.chat.service.ts:35",{"_index":577,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/app/shared/services/sessionstorage.service.ts",{"_index":673,"title":{},"body":{"injectables/SessionstorageService.html":{},"coverage.html":{}}}],["src/app/shared/services/sessionstorage.service.ts:14",{"_index":676,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["src/app/shared/services/sessionstorage.service.ts:18",{"_index":678,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["src/app/shared/services/sessionstorage.service.ts:9",{"_index":675,"title":{},"body":{"injectables/SessionstorageService.html":{}}}],["src/environments/environment",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["src/environments/environment.prod",{"_index":589,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/environments/environment.prod.ts",{"_index":764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":766,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":50,"title":{"classes/Start.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["start_app",{"_index":39,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["start_app_success",{"_index":40,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["started",{"_index":802,"title":{"index.html":{}},"body":{}}],["startsuccess",{"_index":53,"title":{"classes/StartSuccess.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["startsuccess(messages",{"_index":562,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["state",{"_index":63,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state(\"true",{"_index":400,"title":{},"body":{"components/ChatComponent.html":{}}}],["state.chatreducer",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.config",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.config.username",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.countnotread",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.isloadconfig",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.messages",{"_index":619,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["state.messages.map(message",{"_index":624,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["state.url",{"_index":642,"title":{},"body":{"guards/IsExistName.html":{}}}],["statements",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["stick",{"_index":490,"title":{},"body":{"components/ChatComponent.html":{}}}],["store",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["stored",{"_index":828,"title":{},"body":{"index.html":{}}}],["storedevtoolsmodule",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["storedevtoolsmodule.instrument",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["storemodule",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["storemodule.forroot",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":343,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"interfaces/Message.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{}}}],["style",{"_index":390,"title":{},"body":{"components/ChatComponent.html":{}}}],["styles",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["styleurls",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["styling",{"_index":463,"title":{},"body":{"components/ChatComponent.html":{}}}],["subscribe((config",{"_index":704,"title":{},"body":{"components/SettingsComponent.html":{}}}],["subscribe(config",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["subscribe(isload",{"_index":638,"title":{},"body":{"guards/IsExistName.html":{}}}],["subscription",{"_index":326,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["subscription.unsubscribe",{"_index":453,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["success",{"_index":535,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["support",{"_index":848,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":849,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":612,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["table",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChatEffects.html":{}}}],["tap",{"_index":385,"title":{},"body":{"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"guards/IsExistName.html":{}}}],["tap((messages",{"_index":416,"title":{},"body":{"components/ChatComponent.html":{}}}],["template",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["templateurl",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["test",{"_index":837,"title":{},"body":{"index.html":{}}}],["tests",{"_index":836,"title":{},"body":{"index.html":{}}}],["text",{"_index":499,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["texte",{"_index":345,"title":{},"body":{"components/ChatComponent.html":{}}}],["themedark",{"_index":605,"title":{},"body":{"interfaces/ChatState.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["this._activemenu",{"_index":138,"title":{},"body":{"components/AppComponent.html":{}}}],["this._socket",{"_index":590,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.action$.pipe",{"_index":411,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.actions.pipe",{"_index":516,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.activeblink",{"_index":423,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.activemenu",{"_index":146,"title":{},"body":{"components/AppComponent.html":{}}}],["this.boxscroll",{"_index":409,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.boxscroll.clientheight",{"_index":425,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.boxscroll.scrollheight",{"_index":422,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.boxscroll.scrolltop",{"_index":421,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.cachedmessages",{"_index":426,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.chatservice.getallmessage().pipe(take(1",{"_index":560,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.chatservice.getnewmessage().pipe",{"_index":555,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.chatservice.sendmessage(data.message",{"_index":518,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.embedservice.embed(texte",{"_index":443,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.firstinitmessages",{"_index":419,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.isloading",{"_index":413,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.lsstorage.getconfig",{"_index":525,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.lsstorage.setconfig(initialstate.config",{"_index":552,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.lsstorage.setconfig(newconfig",{"_index":528,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.message.reset",{"_index":432,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.message.setvalue(this.message.value",{"_index":438,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.message.value",{"_index":431,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.opensmiley",{"_index":446,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.regexyoutube.test(texte",{"_index":442,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.router.navigate",{"_index":664,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.router.navigate([\"/chat",{"_index":643,"title":{},"body":{"guards/IsExistName.html":{}}}],["this.router.navigate([\"/login",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"guards/IsExistName.html":{}}}],["this.settings",{"_index":700,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.get(nameformcontrol).value",{"_index":714,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.setvalue(config",{"_index":705,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.valuechanges.subscribe",{"_index":708,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.socket.emit('message",{"_index":592,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.socket.on('message",{"_index":594,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.socket.on('messages",{"_index":596,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.store",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/SettingsComponent.html":{}}}],["this.store.dispatch",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["this.store.dispatch(new",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"guards/IsExistName.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["this.store.pipe",{"_index":636,"title":{},"body":{"guards/IsExistName.html":{}}}],["this.store.select(count",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.select(getconfig).pipe",{"_index":447,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.store.select(getconfig).pipe(map(config",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["this.store.select(getconfig).subscribe(config",{"_index":662,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.store.select(islogin",{"_index":142,"title":{},"body":{"components/AppComponent.html":{}}}],["this.store.select(messages).pipe",{"_index":415,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.store.select(username",{"_index":440,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.subscription.foreach(subscription",{"_index":452,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["this.subscription.push(getconfigsubscription",{"_index":437,"title":{},"body":{"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["this.subscription.push(selectconfig",{"_index":665,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.subscription.push(usernamestoresubscription",{"_index":433,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.toastr.success",{"_index":534,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["this.username",{"_index":660,"title":{},"body":{"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["this.username.value",{"_index":668,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.usernamestore.subscribe(name",{"_index":429,"title":{},"body":{"components/ChatComponent.html":{}}}],["thumbnail_medium",{"_index":445,"title":{},"body":{"components/ChatComponent.html":{}}}],["timeout",{"_index":539,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["toast",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["toastr",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChatEffects.html":{},"dependencies.html":{}}}],["toastrmessange",{"_index":533,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["toastrmodule",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["toastrmodule.forroot",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["toastrservice",{"_index":512,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["togglemenu",{"_index":100,"title":{},"body":{"components/AppComponent.html":{}}}],["togglesmiley",{"_index":333,"title":{},"body":{"components/ChatComponent.html":{}}}],["top",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ChatComponent.html":{}}}],["transition",{"_index":391,"title":{},"body":{"components/ChatComponent.html":{}}}],["transition(\"false",{"_index":402,"title":{},"body":{"components/ChatComponent.html":{}}}],["transition(\"true",{"_index":407,"title":{},"body":{"components/ChatComponent.html":{}}}],["tree",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["trigger",{"_index":392,"title":{},"body":{"components/ChatComponent.html":{}}}],["trigger(\"activeanimation",{"_index":395,"title":{},"body":{"components/ChatComponent.html":{}}}],["true",{"_index":403,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/ChatState.html":{},"interfaces/configState.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"interfaces/ChatState.html":{},"guards/IsExistName.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"interfaces/Message.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":857,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":835,"title":{},"body":{"index.html":{}}}],["update",{"_index":537,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["update_config",{"_index":46,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["update_config_success",{"_index":47,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["update_message",{"_index":45,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{}}}],["updateconfig",{"_index":68,"title":{"classes/UpdateConfig.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateconfig(configstate",{"_index":713,"title":{},"body":{"components/SettingsComponent.html":{}}}],["updateconfig(value",{"_index":669,"title":{},"body":{"components/LoginComponent.html":{}}}],["updateconfigsuccess",{"_index":71,"title":{"classes/UpdateConfigSuccess.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"injectables/ChatEffects.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateconfigsuccess(newconfig",{"_index":543,"title":{},"body":{"injectables/ChatEffects.html":{}}}],["updatemessage",{"_index":66,"title":{"classes/UpdateMessage.html":{}},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/ChatComponent.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateon",{"_index":701,"title":{},"body":{"components/SettingsComponent.html":{}}}],["url",{"_index":572,"title":{},"body":{"injectables/ChatService.html":{}}}],["urlserver",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":824,"title":{},"body":{"index.html":{}}}],["user",{"_index":608,"title":{},"body":{"interfaces/ChatState.html":{},"interfaces/configState.html":{}}}],["username",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"interfaces/ChatState.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"interfaces/configState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernamestore",{"_index":334,"title":{},"body":{"components/ChatComponent.html":{}}}],["usernamestoresubscription",{"_index":428,"title":{},"body":{"components/ChatComponent.html":{}}}],["validators",{"_index":381,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["validators.required",{"_index":364,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["value",{"_index":25,"title":{},"body":{"classes/AddMessage.html":{},"classes/AddMessageSuccess.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"injectables/ChatService.html":{},"classes/Load.html":{},"classes/LoadSuccess.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"classes/Start.html":{},"classes/StartSuccess.html":{},"classes/UpdateConfig.html":{},"classes/UpdateConfigSuccess.html":{},"classes/UpdateMessage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.clock12hour",{"_index":711,"title":{},"body":{"components/SettingsComponent.html":{}}}],["value.shortcutenter",{"_index":712,"title":{},"body":{"components/SettingsComponent.html":{}}}],["value.themedark",{"_index":710,"title":{},"body":{"components/SettingsComponent.html":{}}}],["value.username",{"_index":709,"title":{},"body":{"components/SettingsComponent.html":{}}}],["var",{"_index":202,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatEffects.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["variable",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":859,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":808,"title":{},"body":{"index.html":{}}}],["via",{"_index":839,"title":{},"body":{"index.html":{}}}],["video",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"components/ChatComponent.html":{},"dependencies.html":{}}}],["void",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"injectables/ChatService.html":{},"components/LoginComponent.html":{},"injectables/SessionstorageService.html":{},"components/SettingsComponent.html":{}}}],["white",{"_index":170,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/SettingsComponent.html":{}}}],["width",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["yes",{"_index":723,"title":{},"body":{"components/SettingsComponent.html":{}}}],["z",{"_index":504,"title":{},"body":{"components/ChatComponent.html":{}}}],["zone.js",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddMessage.html":{"url":"classes/AddMessage.html","title":"class - AddMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: Message)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        Message\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.ADD_MESSAGE\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:70\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMessageSuccess.html":{"url":"classes/AddMessageSuccess.html","title":"class - AddMessageSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMessageSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: Message)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        Message\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.ADD_MESSAGE_SUCCESS\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:76\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _activeMenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLogin\n                                \n                                \n                                    activeMenu\n                                \n                                \n                                    count\n                                \n                                \n                                    isDark\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleMenu\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleMenu()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _activeMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLogin\n                    \n                \n\n                \n                    \n                        getisLogin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/app.component.ts:25\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        activeMenu\n                    \n                \n\n                \n                    \n                        getactiveMenu()\n                    \n                \n                            \n                                \n                                    Defined in src/app/app.component.ts:29\n                                \n                            \n\n                \n                    \n                        setactiveMenu(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/app/app.component.ts:33\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/app.component.ts:37\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDark\n                    \n                \n\n                \n                    \n                        getisDark()\n                    \n                \n                            \n                                \n                                    Defined in src/app/app.component.ts:45\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from \"@angular/core\";\nimport { ChatState } from \"./shared/ngrx/reducers/chat.reducers\";\nimport { Store } from \"@ngrx/store\";\nimport { isLogin, getConfig, count } from \"./shared/ngrx/selectors/chat.selector\";\nimport { Observable } from \"rxjs\";\nimport { Start, UpdateConfig } from \"./shared/ngrx/actions/chat.action\";\nimport { map, take } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements OnInit {\n  private _activeMenu: boolean;\n\n  constructor(private store: Store, private router: Router) {\n    this._activeMenu = false;\n    this.store.dispatch(new Start());\n  }\n\n  ngOnInit() {}\n\n  get isLogin(): Observable {\n    return this.store.select(isLogin);\n  }\n\n  get activeMenu(){\n    return this._activeMenu;\n  }\n\n  set activeMenu(value: boolean){\n    this._activeMenu = value;\n  }\n\n  get count(): Observable{\n    return this.store.select(count)\n  }\n\n  toggleMenu() {\n    this.activeMenu = !this.activeMenu;\n  }\n\n  get isDark(): Observable {\n    return this.store.select(getConfig).pipe(map(config => config.themeDark));\n  }\n\n  disconnect() {\n    this.store\n      .select(getConfig)\n      .pipe(take(1))\n      .subscribe(config => {\n        this.store.dispatch(\n          new UpdateConfig({\n            ...config,\n            username: \"\"\n          })\n        );\n      });\n    this.router.navigate([\"/login\"]);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            RXJS-CHAT\n          \n\n          \n            \n            \n            \n          \n        \n\n        \n          \n            \n              \n                \n                  chat\n                  {{count | async}}\n                \n                \n                  settings\n                \n                \n                  disconnect\n                \n              \n            \n          \n        \n      \n    \n    \n      \n        \n          \n        \n      \n    \n  \n  \n    \n      \n        \n          \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                nav.navbar {\n  width: 100%;\n}\n\n.notifNotRead{\n  border-radius: 50%;\n  color: black;\n  background-color: white;\n  border: 1px solid gray;\n  width: 1.5em;\n  height: 1.5em;\n  font-size:.8em;\n  position: absolute;\n  right: -.5em;\n  top: -.5em;\n}\n.hero.is-fullheight-with-navbar .hero-body {\n  align-items: normal;\n}\n@media screen and (max-width: 1023px) {\n  .navbar-menu.is-active {\n    position: absolute;\n    width: 100%;\n  }\n  .navbar-menu.is-black {\n    background-color: #0a0a0a;\n    color: white;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                          RXJS-CHAT                                                                                                                                                        chat                  {{count | async}}                                                  settings                                                  disconnect                                                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nChatComponent\n\nChatComponent\n\nAppModule -->\n\nChatComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nEmbedVideo\n\nEmbedVideo\n\nAppModule -->\n\nEmbedVideo->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            ChatComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            SettingsComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            EmbedVideo\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpClientModule } from \"@angular/common/http\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { RouterModule } from \"@angular/router\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\nimport { NgxLinkifyjsModule } from \"ngx-linkifyjs\";\nimport { ToastrModule } from \"ngx-toastr\";\nimport { environment } from \"src/environments/environment\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { ChatComponent } from \"./chat/chat.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { SettingsComponent } from \"./settings/settings.component\";\nimport { ChatEffects } from \"./shared/ngrx/effects/chat.effect\";\nimport { ChatReducer } from \"./shared/ngrx/reducers/chat.reducers\";\nimport { EmbedVideo } from 'ngx-embed-video';\nimport { PickerModule } from '@ctrl/ngx-emoji-mart'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SettingsComponent,\n    LoginComponent,\n    ChatComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ToastrModule.forRoot({\n      positionClass: \"toast-top-center\"\n    }),\n    StoreModule.forRoot({ ChatReducer }),\n    RouterModule.forRoot([]),\n    EffectsModule.forRoot([ChatEffects]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      logOnly: environment.production // Restrict extension to log-only mode\n    }),\n    NgxLinkifyjsModule.forRoot(),\n    EmbedVideo.forRoot(),\n    PickerModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h1')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { AppComponent } from './app.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { IsExistName } from './isExistName.guard';\nimport { ChatComponent } from './chat/chat.component';\n\nexport const appRouteList: Routes = [\n    {\n      path: 'login',\n      component: LoginComponent,\n      canActivate: [\n        IsExistName\n      ]\n    },\n    {\n      path: 'chat',\n      component: ChatComponent,\n      canActivate: [\n        IsExistName\n      ]\n    },\n    {\n      path: 'settings',\n      component: SettingsComponent,\n      canActivate: [\n        IsExistName\n      ]\n    },\n    {\n        path: '',\n        redirectTo: 'chat',\n        pathMatch: 'full'\n    }\n];\n\n@NgModule({\n    exports: [\n        RouterModule\n    ],\n    imports: [\n        RouterModule.forRoot(appRouteList)\n    ]\n})\nexport class AppRoutingModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChatComponent.html":{"url":"components/ChatComponent.html","title":"component - ChatComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChatComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/chat/chat.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chat\n            \n\n            \n                styleUrls\n                ./chat.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./chat.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeBlink\n                            \n                            \n                                    Private\n                                boxScroll\n                            \n                            \n                                    Private\n                                cachedMessages\n                            \n                            \n                                    Private\n                                firstInitMessages\n                            \n                            \n                                    Public\n                                isLoading\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                openSmiley\n                            \n                            \n                                    Private\n                                regexYoutube\n                            \n                            \n                                    Private\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEmoji\n                            \n                            \n                                embedVideo\n                            \n                            \n                                formatDateAMPM\n                            \n                            \n                                isEmbedVideo\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onScroll\n                            \n                            \n                                sendMessage\n                            \n                            \n                                toggleSmiley\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    messages\n                                \n                                \n                                    usernameStore\n                                \n                                \n                                    isDark\n                                \n                                \n                                    isShorcut\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, action$: Actions, embedService: EmbedVideoService)\n                    \n                \n                        \n                            \n                                Defined in src/app/chat/chat.component.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action$\n                                                  \n                                                        \n                                                                        Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        embedService\n                                                  \n                                                        \n                                                                    EmbedVideoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addEmoji\n                        \n                        \n                    \n                \n            \n            \n                \naddEmoji($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            embedVideo\n                        \n                        \n                    \n                \n            \n            \n                \nembedVideo(texte: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    texte\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            formatDateAMPM\n                        \n                        \n                    \n                \n            \n            \n                \nformatDateAMPM(date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEmbedVideo\n                        \n                        \n                    \n                \n            \n            \n                \nisEmbedVideo(texte: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    texte\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onScroll\n                        \n                        \n                    \n                \n            \n            \n                \nonScroll($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \nsendMessage($event: null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSmiley\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSmiley()\n                \n            \n\n\n            \n                \n                    Defined in src/app/chat/chat.component.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeBlink\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:75\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            boxScroll\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Element\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cachedMessages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            firstInitMessages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormControl\n\n                        \n                    \n                    \n                        \n                            Default value : new FormControl(\"\", Validators.required)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openSmiley\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            regexYoutube\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : new RegExp(\n    \"^(https?://)?(www.)?(youtube.com|youtu.?be)/.+$\"\n  )\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/chat/chat.component.ts:63\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        messages\n                    \n                \n\n                \n                    \n                        getmessages()\n                    \n                \n                            \n                                \n                                    Defined in src/app/chat/chat.component.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        usernameStore\n                    \n                \n\n                \n                    \n                        getusernameStore()\n                    \n                \n                            \n                                \n                                    Defined in src/app/chat/chat.component.ts:156\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDark\n                    \n                \n\n                \n                    \n                        getisDark()\n                    \n                \n                            \n                                \n                                    Defined in src/app/chat/chat.component.ts:160\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isShorcut\n                    \n                \n\n                \n                    \n                        getisShorcut()\n                    \n                \n                            \n                                \n                                    Defined in src/app/chat/chat.component.ts:164\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  AfterContentInit,\n  AfterViewChecked\n} from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { Store } from \"@ngrx/store\";\nimport * as dateFns from \"date-fns\";\nimport { EmbedVideoService } from \"ngx-embed-video\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { map, tap, distinctUntilChanged, distinct } from \"rxjs/operators\";\nimport { Message } from \"../shared/models/message\";\nimport {\n  ActionTypes,\n  AddMessage,\n  UpdateMessage\n} from \"../shared/ngrx/actions/chat.action\";\nimport { ChatState } from \"../shared/ngrx/reducers/chat.reducers\";\nimport {\n  getConfig,\n  messages,\n  username,\n  count\n} from \"../shared/ngrx/selectors/chat.selector\";\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from \"@angular/animations\";\n\n@Component({\n  selector: \"app-chat\",\n  templateUrl: \"./chat.component.html\",\n  styleUrls: [\"./chat.component.scss\"],\n  animations: [\n    trigger(\"activeAnimation\", [\n      state(\n        \"false\",\n        style({ opacity: \"0\", display: \"none\" })\n      ),\n      state(\"true\", style({ opacity: \"1\" })),\n\n      transition(\"false => true\", [\n        style({ display: \"block\" }),\n        animate(\"100ms ease-in\")\n      ]),\n\n      transition(\"true => false\", [animate(\"100ms ease-in\")])\n    ])\n  ]\n})\n/**\n * A class representing a chat component\n * @class  ChatComponent\n */\nexport class ChatComponent implements OnInit, OnDestroy {\n  private subscription: Subscription[] = [];\n  public isLoading: boolean = false;\n  public message: FormControl = new FormControl(\"\", Validators.required);\n\n  private boxScroll: Element;\n  private regexYoutube: RegExp = new RegExp(\n    \"^(https?://)?(www.)?(youtube.com|youtu.?be)/.+$\"\n  );\n\n  private firstInitMessages: boolean = false;\n  public openSmiley: boolean = false;\n  private cachedMessages: Message[] = [];\n  private activeBlink: boolean = false;\n  constructor(\n    private store: Store,\n    private action$: Actions,\n    private embedService: EmbedVideoService\n  ) {}\n\n  ngOnInit() {\n    this.boxScroll = document.getElementById(\"boxScroll\");\n    this.action$.pipe(\n      ofType(ActionTypes.ADD_MESSAGE),\n      tap(() => (this.isLoading = true))\n    );\n\n    this.action$.pipe(\n      ofType(ActionTypes.ADD_MESSAGE_SUCCESS),\n      tap(() => (this.isLoading = false))\n    );\n  }\n\n  onScroll($event) {\n    this.store.dispatch(new UpdateMessage());\n  }\n\n  get messages(): Observable {\n    return this.store.select(messages).pipe(\n      tap((messages: Message[]) => {\n        if (JSON.stringify(this.cachedMessages) !== JSON.stringify(messages)) {\n          if (!this.firstInitMessages) {\n            setTimeout(() => {\n              this.boxScroll.scrollTop = this.boxScroll.scrollHeight;\n            });\n            this.firstInitMessages = !this.firstInitMessages;\n            this.store.dispatch(new UpdateMessage());\n          } else {\n            this.activeBlink = true;\n            setTimeout(() => {\n              this.activeBlink = false;\n            }, 1000);\n            if (this.boxScroll.scrollHeight === this.boxScroll.clientHeight) {\n              this.store.dispatch(new UpdateMessage());\n            }\n          }\n        }\n        this.cachedMessages = messages;\n      })\n    );\n  }\n\n  sendMessage($event = null) {\n    const send = () => {\n      const usernameStoreSubscription = this.usernameStore.subscribe(name => {\n        this.store.dispatch(\n          new AddMessage({\n            name: name,\n            description: this.message.value\n          })\n        );\n      });\n      this.message.reset();\n      this.subscription.push(usernameStoreSubscription);\n    };\n    if ($event != null) {\n      const getConfigSubscription = this.store\n        .select(getConfig)\n        .subscribe(config => {\n          if (config.shortcutEnter) {\n            $event.preventDefault();\n            send();\n          }\n        });\n      this.subscription.push(getConfigSubscription);\n    } else {\n      send();\n    }\n  }\n\n  addEmoji($event) {\n    this.message.setValue(this.message.value + \" \" + $event.emoji.native);\n  }\n\n  get usernameStore(): Observable {\n    return this.store.select(username);\n  }\n\n  get isDark(): Observable {\n    return this.store.select(getConfig).pipe(map(config => config.themeDark));\n  }\n\n  get isShorcut(): Observable {\n    return this.store\n      .select(getConfig)\n      .pipe(map(config => config.shortcutEnter));\n  }\n\n  isEmbedVideo(texte: string): boolean {\n    return this.regexYoutube.test(texte);\n  }\n\n  embedVideo(texte: string) {\n    return this.embedService.embed(texte, { image: \"thumbnail_medium\" });\n  }\n\n  toggleSmiley() {\n    this.openSmiley = !this.openSmiley;\n  }\n\n  formatDateAMPM(date: string): Observable {\n    return this.store.select(getConfig).pipe(\n      map(config => {\n        if (config.clock12hour) {\n          return dateFns.format(date, \"hh:mm\");\n        } else {\n          return dateFns.format(date, \"HH:mm\");\n        }\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.forEach(subscription => subscription.unsubscribe());\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          {{ message.name }} - {{ formatDateAMPM(message.date) | async }}\n            \n        \n        \n          \n          \n            \n          \n        \n      \n    \n  \n\n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n          \n          \n            \n            \n          \n        \n      \n      \n        \n          Send\n        \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./chat.component.scss\n                \n                .boxMessages {\n    /* Flexbox-specific styles */\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n  \n    /* General styling */\n    font: 16px/1.3 sans-serif;\n    height: calc(100vh - 220px);\n    list-style-type: none;\n    margin: 0 auto;\n    padding: 8px;\n    overflow: auto;\n    width: 100%;\n\n    \n  }\n  \n  /* Default styles for chat bubbles */\n\n  .boxMessages li {\n    div{\n      margin: 8px;\n    }\n    .meta{\n      font-size: .8em;\n    }\n    .description {\n      background: white;\n      border-radius: 8px;\n      padding:8px 12px;\n      margin: 5px 0;\n      div a {\n        background: white;\n        color: black;\n      }\n      \n      \n      &.is-black{\n        background-color: black;\n        color: white;\n      }\n      &.is-primary{\n          color:white;\n          background: #9C0201;\n      }\n    }\n  }\n  \n  /* Styles specific to our chat bubbles */\n  .boxMessages li.ours {\n    align-self: flex-end; /* Stick to the right side, please! */\n    margin: 2px 0 2px 8px;\n  }\n\n  .barActionMessage{\n      position: fixed;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      padding: 24px;\n  }\n\n  .is-right{\n      align-self: flex-end;\n      text-align: right;\n  }\n\n  emoji-mart{\n    &.is-close{\n      display: none;\n    }\n  }\n\n  .overlayBlink{\n    background-color: rgb(255,255,255);\n    position: fixed;\n    left:0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: none;\n    z-index: 1;\n    &.is-active{\n      display: block;\n    }\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              {{ message.name }} - {{ formatDateAMPM(message.date) | async }}                                                                                                                                                                                                                                                                      Send                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChatComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatEffects.html":{"url":"injectables/ChatEffects.html","title":"injectable - ChatEffects","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/effects/chat.effect.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $addMessage\n                            \n                            \n                                $config\n                            \n                            \n                                $LoadConfig\n                            \n                            \n                                $receiveMessage\n                            \n                            \n                                $start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lsStorage: SessionstorageService, toastr: ToastrService, actions: Actions, chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/effects/chat.effect.ts:106\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lsStorage\n                                                  \n                                                        \n                                                                        SessionstorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        toastr\n                                                  \n                                                        \n                                                                    ToastrService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            $addMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions.pipe(\n    ofType(ActionTypes.ADD_MESSAGE),\n    map(data => {\n      this.chatService.sendMessage(data.message);\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect({dispatch: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/effects/chat.effect.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            $config\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions.pipe(\n    ofType(ActionTypes.UPDATE_CONFIG),\n    map(action => {\n      let configChange = [];\n      const getConfig: configState = this.lsStorage.getConfig();\n      const newConfig: configState = {\n        ...getConfig,\n        ...action.config\n      };\n      this.lsStorage.setConfig(newConfig);\n\n      for (var property in getConfig) {\n        if (getConfig[property] != newConfig[property]) {\n          configChange.push(property);\n        }\n      }\n\n      const toastrMessange = () => {\n        this.toastr.success(\n          `Success Change`,\n          `Update Settings - ${configChange.join(\",\")}`, \n          { timeOut: 3000 }\n        );\n      }\n\n      if(configChange[0] === 'username' && newConfig.username != \"\"){\n        toastrMessange();\n      }else if(configChange[0] !== 'username'){\n        toastrMessange();\n      }\n\n      return new UpdateConfigSuccess(newConfig);\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/effects/chat.effect.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            $LoadConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions.pipe(\n    ofType(ActionTypes.LOAD_CONFIG),\n    mergeMap(messages => of(this.lsStorage.getConfig())),\n    map((lsConfig: configState) => {\n      if (lsConfig) {\n        return new LoadSuccess(lsConfig);\n      } else {\n        this.lsStorage.setConfig(initialState.config);\n        return new LoadSuccess(initialState.config);\n      }\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/effects/chat.effect.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            $receiveMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.chatService.getNewMessage().pipe(\n    map(data => {\n      return new AddMessageSuccess(data);\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/effects/chat.effect.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            $start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions.pipe(\n    ofType(ActionTypes.START_APP),\n    mergeMap(() => this.chatService.getAllMessage().pipe(take(1))),\n    map((messages:  Message[]) => {\n        return new StartSuccess(messages);\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/effects/chat.effect.ts:35\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { Effect, ofType, Actions } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { map, mergeMap, tap, take} from \"rxjs/operators\";\n\nimport {\n  ActionTypes,\n  UpdateConfig,\n  UpdateConfigSuccess,\n  AddMessage,\n  AddMessageSuccess,\n  LoadSuccess,\n  Load,\n  StartSuccess,\n  Start\n} from \"../actions/chat.action\";\n\nimport {\n  initialState,\n  ChatState,\n  configState\n} from \"../reducers/chat.reducers\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { SessionstorageService } from \"../../services/sessionstorage.service\";\nimport { Router } from \"@angular/router\";\nimport { ChatService } from \"../../services/app.chat.service\";\nimport { Message } from \"../../models/message\";\nimport { Store } from \"@ngrx/store\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ChatEffects {\n  @Effect()\n  $start = this.actions.pipe(\n    ofType(ActionTypes.START_APP),\n    mergeMap(() => this.chatService.getAllMessage().pipe(take(1))),\n    map((messages:  Message[]) => {\n        return new StartSuccess(messages);\n    })\n  );\n\n  @Effect()\n  $LoadConfig = this.actions.pipe(\n    ofType(ActionTypes.LOAD_CONFIG),\n    mergeMap(messages => of(this.lsStorage.getConfig())),\n    map((lsConfig: configState) => {\n      if (lsConfig) {\n        return new LoadSuccess(lsConfig);\n      } else {\n        this.lsStorage.setConfig(initialState.config);\n        return new LoadSuccess(initialState.config);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  $addMessage = this.actions.pipe(\n    ofType(ActionTypes.ADD_MESSAGE),\n    map(data => {\n      this.chatService.sendMessage(data.message);\n    })\n  );\n\n  @Effect()\n  $receiveMessage = this.chatService.getNewMessage().pipe(\n    map(data => {\n      return new AddMessageSuccess(data);\n    })\n  );\n\n  @Effect()\n  $config = this.actions.pipe(\n    ofType(ActionTypes.UPDATE_CONFIG),\n    map(action => {\n      let configChange = [];\n      const getConfig: configState = this.lsStorage.getConfig();\n      const newConfig: configState = {\n        ...getConfig,\n        ...action.config\n      };\n      this.lsStorage.setConfig(newConfig);\n\n      for (var property in getConfig) {\n        if (getConfig[property] != newConfig[property]) {\n          configChange.push(property);\n        }\n      }\n\n      const toastrMessange = () => {\n        this.toastr.success(\n          `Success Change`,\n          `Update Settings - ${configChange.join(\",\")}`, \n          { timeOut: 3000 }\n        );\n      }\n\n      if(configChange[0] === 'username' && newConfig.username != \"\"){\n        toastrMessange();\n      }else if(configChange[0] !== 'username'){\n        toastrMessange();\n      }\n\n      return new UpdateConfigSuccess(newConfig);\n    })\n  );\n\n  constructor(\n    private lsStorage: SessionstorageService,\n    private toastr: ToastrService,\n    private actions: Actions,\n    private chatService: ChatService\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/app.chat.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _socket\n                            \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAllMessage\n                            \n                            \n                                    Public\n                                getNewMessage\n                            \n                            \n                                    Public\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    socket\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/app.chat.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAllMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/app.chat.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNewMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/app.chat.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/app.chat.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _socket\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/services/app.chat.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : env.urlServer\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/app.chat.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        socket\n                    \n                \n\n                \n                    \n                        getsocket()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/services/app.chat.service.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport * as io from 'socket.io-client';\nimport { Injectable } from '@angular/core';\nimport {Message} from '../models/message'\nimport {environment as env} from 'src/environments/environment.prod';\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class ChatService {\n    private url = env.urlServer;\n    private _socket;    \n\n    constructor() {\n        this._socket = io(this.url);\n    }\n\n    get socket(){\n        return this._socket;\n    }\n\n    public sendMessage(message: Message) {\n        this.socket.emit('message', message);\n    }\n\n    public getNewMessage(): Observable{\n        return Observable.create((observer) => {\n            this.socket.on('message', (message) => {\n                observer.next(message);\n            });\n        });\n    }\n\n    public getAllMessage(): Observable{\n        return Observable.create((observer) => {\n            this.socket.on('messages', (messages) => {\n                observer.next(messages);\n            });\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatState.html":{"url":"interfaces/ChatState.html","title":"interface - ChatState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChatState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/reducers/chat.reducers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        countNotRead\n                                \n                                \n                                        isLoadConfig\n                                \n                                \n                                        messages\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         configState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         configState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        countNotRead\n                                    \n                                \n                                \n                                    \n                                        countNotRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoadConfig\n                                    \n                                \n                                \n                                    \n                                        isLoadConfig:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messages\n                                    \n                                \n                                \n                                    \n                                        messages:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionTypes } from \"../actions/chat.action\";\n\nexport interface configState {\n  username: string;\n  themeDark: boolean;\n  clock12hour: boolean;\n  shortcutEnter: boolean;\n}\n\nexport interface ChatState {\n  isLoadConfig: boolean;\n  config: configState;\n  messages: {\n    user: string;\n    message: string;\n    read: boolean;\n    date: string;\n  }[],\n  countNotRead: number\n}\n\nexport const initialState: ChatState = {\n  isLoadConfig: false,\n  config: {\n    username: \"\",\n    themeDark: false,\n    clock12hour: false,\n    shortcutEnter: false\n  },\n  messages: [],\n  countNotRead: 0\n};\n\nexport function ChatReducer(state: ChatState = initialState, action) {\n  switch (action.type) {\n    case ActionTypes.LOAD_CONFIG_SUCCESS:\n      return {\n        ...state,\n        config: action.state,\n        isLoadConfig: true\n      };\n    case ActionTypes.START_APP_SUCCESS:\n      return {\n        ...state,\n        messages: action.messages.map(message => {\n          message.read = false;\n          return message;\n        })\n      };\n    case ActionTypes.ADD_MESSAGE_SUCCESS:\n      action.message.read = false;\n      return {\n        ...state,\n        messages: [...state.messages, action.message],\n        countNotRead: [...state.messages, action.message].filter(message => message.read === false).length\n      };\n    case ActionTypes.UPDATE_MESSAGE:\n      const newStates = state.messages.map(message => {\n        message.read = true\n        return message;\n      })\n      return {\n        ...state,\n        messages: newStates,\n        countNotRead: newStates.filter(message => message.read == false).length\n      };\n    case ActionTypes.UPDATE_CONFIG_SUCCESS:\n      return {\n        ...state,\n        config: action.config\n      };\n    default:\n      return state;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsExistName.html":{"url":"guards/IsExistName.html","title":"guard - IsExistName","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsExistName\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/isExistName.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/isExistName.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/isExistName.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\nimport { select, Store } from \"@ngrx/store\";\nimport { Observable, of } from \"rxjs\";\nimport { distinctUntilChanged, mergeMap, tap } from \"rxjs/operators\";\nimport { Load } from \"./shared/ngrx/actions/chat.action\";\nimport { ChatState } from \"./shared/ngrx/reducers/chat.reducers\";\nimport { isLoadConfig, isLogin } from \"./shared/ngrx/selectors/chat.selector\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class IsExistName implements CanActivate {\n  constructor(private store: Store, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.store.pipe(\n      tap(() => {\n        this.store\n          .select(isLoadConfig)\n          .subscribe(isLoad => {\n            if (!isLoad) {\n              this.store.dispatch(new Load());\n            }\n          });\n      }),\n      select(isLogin),\n      mergeMap(isLogin => {\n        if (isLogin) {\n          if (state.url === \"/login\") {\n            this.router.navigate([\"/chat\"]);\n            return of(false);\n          } else {\n            return of(true);\n          }\n        } else {\n          if (state.url === \"/login\") {\n            return of(true);\n          } else {\n            this.router.navigate([\"/login\"]);\n            return of(false);\n          }\n        }\n      })\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load.html":{"url":"classes/Load.html","title":"class - Load","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n            \n                Description\n            \n            \n                A class - Action Load\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:56\n                            \n                        \n\n                \n                    \n                            Create a Action Load.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.LOAD_CONFIG\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:56\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadSuccess.html":{"url":"classes/LoadSuccess.html","title":"class - LoadSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: configState)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        configState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         configState\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.LOAD_CONFIG_SUCCESS\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:64\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/login.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                styleUrls\n                ./login.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscription\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                sendUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/login.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendUsername\n                        \n                        \n                    \n                \n            \n            \n                \nsendUsername()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormControl\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { ChatState, initialState, configState } from '../shared/ngrx/reducers/chat.reducers';\nimport { UpdateConfig } from '../shared/ngrx/actions/chat.action';\nimport { Router } from '@angular/router';\nimport { getConfig } from '../shared/ngrx/selectors/chat.selector';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\n/**\n * A class representing a Login component\n * @class  LoginComponent\n */\nexport class LoginComponent implements OnInit, OnDestroy {\n  private subscription: Subscription[] = [];\n  public username: FormControl;\n\n  constructor(\n    private store: Store,\n    private router: Router\n    ) { \n    this.username = new FormControl('', Validators.required);\n  }\n\n  ngOnInit() {\n    const selectConfig = this.store.select(getConfig).subscribe(config => {\n      if(config.username != ''){\n        this.router.navigate(['/'])\n      }\n    })\n    this.subscription.push(selectConfig);\n  }\n\n  sendUsername() {\n    if(this.username.valid){\n      const value: configState = {\n        ...initialState.config,\n        username: this.username.value\n      }\n      this.store.dispatch(new UpdateConfig(value));\n      this.router.navigate(['/'])\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.forEach(subscription => subscription.unsubscribe());\n  }\n\n}\n\n    \n\n    \n        \n\n\n    RXJS-Chat\n    \n        \n        \n            Please enter your name\n            \n            \n            \n                \n            \n            \n            \n        \n        \n            \n            \n                Join chat\n            \n            \n        \n        \n    \n\n    \n\n    \n                \n                    ./login.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    RXJS-Chat                                Please enter your name                                                                                                                                                Join chat                                            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Message.html":{"url":"interfaces/Message.html","title":"interface - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/message.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        date\n                                \n                                \n                                        description\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        read\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Message{\n    name: string;\n    description: string;\n    date?: string\n    read?: boolean;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionstorageService.html":{"url":"injectables/SessionstorageService.html","title":"injectable - SessionstorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SessionstorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/sessionstorage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfig\n                            \n                            \n                                setConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/sessionstorage.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/sessionstorage.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         configState\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsetConfig(newConfig: configState)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/sessionstorage.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newConfig\n                                    \n                                                configState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {environment as env} from '../../../environments/environment';\nimport { configState } from '../ngrx/reducers/chat.reducers';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionstorageService {\n\n  constructor() {\n  }\n\n  getConfig(): configState {\n    return JSON.parse(sessionStorage.getItem(env.nLocalstorage));\n  }\n\n  setConfig(newConfig: configState) {\n    sessionStorage.setItem(env.nLocalstorage, JSON.stringify(newConfig));\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                ./settings.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                settings\n                            \n                            \n                                    Private\n                                subscription\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDark\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive(value, nameFormControl)\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nameFormControl\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            settings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDark\n                    \n                \n\n                \n                    \n                        getisDark()\n                    \n                \n                            \n                                \n                                    Defined in src/app/settings/settings.component.ts:72\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport {\n  ChatState,\n  configState,\n  initialState\n} from \"../shared/ngrx/reducers/chat.reducers\";\nimport { Store } from \"@ngrx/store\";\nimport { getConfig } from \"../shared/ngrx/selectors/chat.selector\";\nimport { UpdateConfig } from \"../shared/ngrx/actions/chat.action\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-settings\",\n  templateUrl: \"./settings.component.html\",\n  styleUrls: [\"./settings.component.scss\"]\n})\n/**\n * A class representing a Setting component\n * @class  SettingsComponent\n */\nexport class SettingsComponent implements OnInit, OnDestroy {\n  private subscription: Subscription[] = [];\n  public settings: FormGroup;\n\n  private username: string;\n\n  constructor(private store: Store) {\n    this.settings = new FormGroup({\n      username: new FormControl(\"\", {\n        updateOn: \"blur\",\n        validators: Validators.required\n      }),\n      themeDark: new FormControl(false),\n      clock12hour: new FormControl(false),\n      shortcutEnter: new FormControl(false)\n    });\n  }\n\n  ngOnInit() {\n    const getConfigSubscription = this.store\n      .select(getConfig)\n      .subscribe((config: configState) => {\n        this.settings.setValue(config, { emitEvent: false });\n      });\n    const settingsChangeSubscription = this.settings.valueChanges.subscribe(\n      value => {\n        const configState: configState = {\n          username: value.username,\n          themeDark: value.themeDark,\n          clock12hour: value.clock12hour,\n          shortcutEnter: value.shortcutEnter\n        };\n        this.username = value.username;\n        this.store.dispatch(new UpdateConfig(configState));\n      }\n    );\n    this.subscription.push(getConfigSubscription, settingsChangeSubscription);\n  }\n\n  reset() {\n    this.store.dispatch(\n      new UpdateConfig({ ...initialState.config, username: this.username })\n    );\n  }\n\n  isActive(value, nameFormControl): boolean {\n    return this.settings.get(nameFormControl).value == value;\n  }\n\n  get isDark(): Observable {\n    return this.store.select(getConfig).pipe(map(config => config.themeDark));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.forEach(subscription => subscription.unsubscribe());\n  }\n}\n\n    \n\n    \n        \n  \n    Username\n    \n      \n    \n  \n\n  \n    Interface Color\n    \n      \n        \n        light\n      \n      \n        \n        dark\n      \n    \n  \n\n  \n    Clock Display\n    \n      \n        \n        24 Hours\n      \n      \n        \n        12 Hours\n      \n    \n  \n\n  \n    Shorcut ( CTRL + ENTER )\n    \n      \n        \n        No\n      \n      \n        \n        Yes\n      \n    \n  \n  \n      Shorcut ( CTRL + ENTER )\n      \n          \n              Reset the settings\n            \n      \n    \n\n\n    \n\n    \n                \n                    ./settings.component.scss\n                \n                .radioBox{\n    display: flex;\n    label{\n        flex: 1;\n        padding: calc(0.375em - 1px) 2.25em;\n        border-radius: 4px;\n        box-shadow: inset 0 -1px 2px rgba(10, 10, 10, 0.1);\n        text-align: center;\n        background: white;\n        &.is-active{\n            background: #9C0201;\n            color: white;\n        }\n    }\n    input{\n        display: none;\n    }\n}\n\n.is-dark{\n    label{\n        color: white;\n    }\n    .radioBox label{\n        color: black;\n        &.is-active{\n            background: #9C0201;\n            color: white;\n        }\n    }\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Username                      Interface Color                          light                            dark                  Clock Display                          24 Hours                            12 Hours                  Shorcut ( CTRL + ENTER )                          No                            Yes                    Shorcut ( CTRL + ENTER )                              Reset the settings                      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Start.html":{"url":"classes/Start.html","title":"class - Start","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Start\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n            \n                Description\n            \n            \n                Implementation of all actions that we are handle\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:29\n                            \n                        \n\n                \n                    \n                            Create a Action Start.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.START_APP\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StartSuccess.html":{"url":"classes/StartSuccess.html","title":"class - StartSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StartSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n            \n                Description\n            \n            \n                A class - Action StartSuccess\n\n            \n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                messages\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messages: Message[])\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:42\n                            \n                        \n\n                \n                    \n                            Create a Action Start.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messages\n                                                  \n                                                        \n                                                                        Message[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.START_APP_SUCCESS\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConfig.html":{"url":"classes/UpdateConfig.html","title":"class - UpdateConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: configState)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:88\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        configState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         configState\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.UPDATE_CONFIG\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:88\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConfigSuccess.html":{"url":"classes/UpdateConfigSuccess.html","title":"class - UpdateConfigSuccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConfigSuccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: configState)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:94\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        configState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         configState\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:96\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.UPDATE_CONFIG_SUCCESS\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:94\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessage.html":{"url":"classes/UpdateMessage.html","title":"class - UpdateMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/actions/chat.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/ngrx/actions/chat.action.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ActionTypes.UPDATE_MESSAGE\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/ngrx/actions/chat.action.ts:82\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from \"@ngrx/store\";\nimport { ChatState, configState } from \"../reducers/chat.reducers\";\nimport { Message } from \"../../models/message\";\n\n/**\n * All the constants to define our actions\n */\nexport enum ActionTypes {\n  START_APP = \"START_APP\",\n  START_APP_SUCCESS = \"START_APP_SUCCESS\",\n  LOAD_CONFIG = \"LOAD_CONFIG\",\n  LOAD_CONFIG_SUCCESS = \"LOAD_CONFIG_SUCCESS\",\n  ADD_MESSAGE = \"ADD_MESSAGE\",\n  ADD_MESSAGE_SUCCESS = \"ADD_MESSAGE_SUCCESS\",\n  UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\n  UPDATE_CONFIG = \"UPDATE_CONFIG\",\n  UPDATE_CONFIG_SUCCESS = \"UPDATE_CONFIG_SUCCESS\"\n}\n\n/**\n * Implementation of all actions that we are handle\n */\n\n/**\n * A class - Action Start\n * @class  Start\n */\nexport class Start implements Action {\n  readonly type = ActionTypes.START_APP;\n\n  /**\n   * Create a Action Start.\n   */\n  constructor() {}\n}\n\n/**\n * A class - Action StartSuccess\n * @class  StartSuccess\n */\nexport class StartSuccess implements Action {\n  readonly type = ActionTypes.START_APP_SUCCESS;\n\n  /**\n   * Create a Action Start.\n   * @param {messages} Message[] - The Array of Message.\n   */\n  constructor(public messages: Message[]) {}\n}\n\n/**\n * A class - Action Load\n * @class  Load\n */\nexport class Load implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG;\n  /**\n   * Create a Action Load.\n   */\n  constructor() {}\n}\n\nexport class LoadSuccess implements Action {\n  readonly type = ActionTypes.LOAD_CONFIG_SUCCESS;\n\n  constructor(public state: configState) {}\n}\n\nexport class AddMessage implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE;\n\n  constructor(public message: Message) {}\n}\n\nexport class AddMessageSuccess implements Action {\n  readonly type = ActionTypes.ADD_MESSAGE_SUCCESS;\n\n  constructor(public message: Message) {}\n}\n\nexport class UpdateMessage implements Action {\n  readonly type = ActionTypes.UPDATE_MESSAGE;\n\n  constructor() {}\n}\n\nexport class UpdateConfig implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG;\n\n  constructor(public config: configState) {}\n}\n\nexport class UpdateConfigSuccess implements Action {\n  readonly type = ActionTypes.UPDATE_CONFIG_SUCCESS;\n\n  constructor(public config: configState) {}\n}\n\nexport type Actions =\n  | Start\n  | StartSuccess\n  | Load\n  | LoadSuccess\n  | AddMessage\n  | AddMessageSuccess\n  | UpdateMessage\n  | UpdateConfig\n  | UpdateConfigSuccess;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/configState.html":{"url":"interfaces/configState.html","title":"interface - configState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  configState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/ngrx/reducers/chat.reducers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clock12hour\n                                \n                                \n                                        shortcutEnter\n                                \n                                \n                                        themeDark\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clock12hour\n                                    \n                                \n                                \n                                    \n                                        clock12hour:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shortcutEnter\n                                    \n                                \n                                \n                                    \n                                        shortcutEnter:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        themeDark\n                                    \n                                \n                                \n                                    \n                                        themeDark:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionTypes } from \"../actions/chat.action\";\n\nexport interface configState {\n  username: string;\n  themeDark: boolean;\n  clock12hour: boolean;\n  shortcutEnter: boolean;\n}\n\nexport interface ChatState {\n  isLoadConfig: boolean;\n  config: configState;\n  messages: {\n    user: string;\n    message: string;\n    read: boolean;\n    date: string;\n  }[],\n  countNotRead: number\n}\n\nexport const initialState: ChatState = {\n  isLoadConfig: false,\n  config: {\n    username: \"\",\n    themeDark: false,\n    clock12hour: false,\n    shortcutEnter: false\n  },\n  messages: [],\n  countNotRead: 0\n};\n\nexport function ChatReducer(state: ChatState = initialState, action) {\n  switch (action.type) {\n    case ActionTypes.LOAD_CONFIG_SUCCESS:\n      return {\n        ...state,\n        config: action.state,\n        isLoadConfig: true\n      };\n    case ActionTypes.START_APP_SUCCESS:\n      return {\n        ...state,\n        messages: action.messages.map(message => {\n          message.read = false;\n          return message;\n        })\n      };\n    case ActionTypes.ADD_MESSAGE_SUCCESS:\n      action.message.read = false;\n      return {\n        ...state,\n        messages: [...state.messages, action.message],\n        countNotRead: [...state.messages, action.message].filter(message => message.read === false).length\n      };\n    case ActionTypes.UPDATE_MESSAGE:\n      const newStates = state.messages.map(message => {\n        message.read = true\n        return message;\n      })\n      return {\n        ...state,\n        messages: newStates,\n        countNotRead: newStates.filter(message => message.read == false).length\n      };\n    case ActionTypes.UPDATE_CONFIG_SUCCESS:\n      return {\n        ...state,\n        config: action.config\n      };\n    default:\n      return state;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/chat/chat.component.ts\n            \n            component\n            ChatComponent\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/isExistName.guard.ts\n            \n            guard\n            IsExistName\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/settings/settings.component.ts\n            \n            component\n            SettingsComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/shared/models/message.ts\n            \n            interface\n            Message\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            AddMessage\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            AddMessageSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            Load\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            LoadSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            Start\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            StartSuccess\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            UpdateConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            UpdateConfigSuccess\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/actions/chat.action.ts\n            \n            class\n            UpdateMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/effects/chat.effect.ts\n            \n            injectable\n            ChatEffects\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/reducers/chat.reducers.ts\n            \n            interface\n            ChatState\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/reducers/chat.reducers.ts\n            \n            interface\n            configState\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/reducers/chat.reducers.ts\n            \n            function\n            ChatReducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/reducers/chat.reducers.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            getChatState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            getConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            isLoadConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            isLogin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            messages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/ngrx/selectors/chat.selector.ts\n            \n            variable\n            username\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/services/app.chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/sessionstorage.service.ts\n            \n            injectable\n            SessionstorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.0\n        \n            @angular/common : ~8.0.0\n        \n            @angular/compiler : ~8.0.0\n        \n            @angular/core : ~8.0.0\n        \n            @angular/forms : ~8.0.0\n        \n            @angular/platform-browser : ~8.0.0\n        \n            @angular/platform-browser-dynamic : ~8.0.0\n        \n            @angular/router : ~8.0.0\n        \n            @ctrl/ngx-emoji-mart : ^0.17.0\n        \n            @ngrx/effects : ^8.1.0\n        \n            @ngrx/router-store : ^8.1.0\n        \n            @ngrx/store : ^8.1.0\n        \n            @ngrx/store-devtools : ^8.1.0\n        \n            bulma-scss : ^0.7.5-1\n        \n            date-fns : ^1.30.1\n        \n            jasmine-marbles : ^0.6.0\n        \n            ngx-embed-video : ^1.0.4\n        \n            ngx-linkifyjs : ^1.3.0\n        \n            ngx-toastr : ^10.0.4\n        \n            rxjs : ~6.4.0\n        \n            rxjs-marbles : ^5.0.2\n        \n            socket.io-client : ^2.2.0\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionTypes   (src/.../chat.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/ngrx/actions/chat.action.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionTypes\n                    \n                \n                    \n                        \n                            All the constants to define our actions\n\n                        \n                    \n                        \n                            \n                                 START_APP\n                            \n                        \n                        \n                            \n                                Value : START_APP\n                            \n                        \n                        \n                            \n                                 START_APP_SUCCESS\n                            \n                        \n                        \n                            \n                                Value : START_APP_SUCCESS\n                            \n                        \n                        \n                            \n                                 LOAD_CONFIG\n                            \n                        \n                        \n                            \n                                Value : LOAD_CONFIG\n                            \n                        \n                        \n                            \n                                 LOAD_CONFIG_SUCCESS\n                            \n                        \n                        \n                            \n                                Value : LOAD_CONFIG_SUCCESS\n                            \n                        \n                        \n                            \n                                 ADD_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : ADD_MESSAGE\n                            \n                        \n                        \n                            \n                                 ADD_MESSAGE_SUCCESS\n                            \n                        \n                        \n                            \n                                Value : ADD_MESSAGE_SUCCESS\n                            \n                        \n                        \n                            \n                                 UPDATE_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : UPDATE_MESSAGE\n                            \n                        \n                        \n                            \n                                 UPDATE_CONFIG\n                            \n                        \n                        \n                            \n                                Value : UPDATE_CONFIG\n                            \n                        \n                        \n                            \n                                 UPDATE_CONFIG_SUCCESS\n                            \n                        \n                        \n                            \n                                Value : UPDATE_CONFIG_SUCCESS\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChatReducer   (src/.../chat.reducers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/ngrx/reducers/chat.reducers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ChatReducer\n                        \n                        \n                    \n                \n            \n            \n                \nChatReducer(state, action)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRxjsChat\nThis project was generated with Angular CLI version 8.0.1.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nChatComponent\n\nChatComponent\n\nAppModule -->\n\nChatComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nEmbedVideo\n\nEmbedVideo\n\nAppModule -->\n\nEmbedVideo->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        4 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Actions   (src/.../chat.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/ngrx/actions/chat.action.ts\n    \n    \n        \n            \n                \n                    \n                    Actions\n                \n            \n            \n                \n                            Start | StartSuccess | Load | LoadSuccess | AddMessage | AddMessageSuccess | UpdateMessage | UpdateConfig | UpdateConfigSuccess\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            count   (src/.../chat.selector.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            getChatState   (src/.../chat.selector.ts)\n                        \n                        \n                            getConfig   (src/.../chat.selector.ts)\n                        \n                        \n                            initialState   (src/.../chat.reducers.ts)\n                        \n                        \n                            isLoadConfig   (src/.../chat.selector.ts)\n                        \n                        \n                            isLogin   (src/.../chat.selector.ts)\n                        \n                        \n                            messages   (src/.../chat.selector.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            username   (src/.../chat.selector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/app/shared/ngrx/selectors/chat.selector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.countNotRead ? state.countNotRead : 0 )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getChatState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : state => state.ChatReducer\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.config ? state.config : null)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoadConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.isLoadConfig)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.config && state.config.username && state.config.username != \"\" ? true : false)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.messages ? state.messages : [] )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getChatState, state => state && state.config && state.config.username ? state.config.username : undefined)\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n  nLocalstorage: 'ngrx-chat_chat_config',\n  urlServer: 'http://localhost:3000'\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  nLocalstorage: 'ngrx-chat_chat_config',\n  urlServer: 'http://localhost:3000'\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/shared/ngrx/reducers/chat.reducers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChatState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  isLoadConfig: false,\n  config: {\n    username: \"\",\n    themeDark: false,\n    clock12hour: false,\n    shortcutEnter: false\n  },\n  messages: [],\n  countNotRead: 0\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
